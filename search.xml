<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ChannelHandler事件</title>
    <url>/2021/08/11/ChannelHandler%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h1><h2 id="ChannelInboundHandler"><a href="#ChannelInboundHandler" class="headerlink" title="ChannelInboundHandler"></a>ChannelInboundHandler</h2><p><code>channelInBoundHandler</code> 事件, 具体可以看 <code>io.netty.channel.ChannelInboundHandler</code> 接口的方法。</p>
<table>
<thead>
<tr>
<th>事件回调方法</th>
<th>触发时机</th>
</tr>
</thead>
<tbody><tr>
<td>channelRegistered</td>
<td>Channel 被注册到 EventLoop</td>
</tr>
<tr>
<td>channelUnReistered</td>
<td>Channel 从 EventLoop 上取消注册</td>
</tr>
<tr>
<td>channelActive</td>
<td>Channel 被激活，处于就绪状态，可以被读写</td>
</tr>
<tr>
<td>channelInActive</td>
<td>Channel 处于非就绪状态，可以从远端读取到数据</td>
</tr>
<tr>
<td>channelRead</td>
<td>Channel 可以从远端读取到数据</td>
</tr>
<tr>
<td>channelReadComplate</td>
<td>Channel 从远端读取数据完成</td>
</tr>
<tr>
<td>userEventTriggered</td>
<td>用户事件被触发时</td>
</tr>
<tr>
<td>channelWritabilityChanged</td>
<td>Channel 的写状态发生变化</td>
</tr>
</tbody></table>
<h2 id="ChannelOutboundHandler"><a href="#ChannelOutboundHandler" class="headerlink" title="ChannelOutboundHandler"></a>ChannelOutboundHandler</h2><table>
<thead>
<tr>
<th>事件回调方法</th>
<th>触发时机</th>
</tr>
</thead>
<tbody><tr>
<td>bind</td>
<td>监听地址(IP + 端口)绑定(用于服务端)</td>
</tr>
<tr>
<td>connect</td>
<td>连接服务器(用于客户端)</td>
</tr>
<tr>
<td>disconnect</td>
<td>断开服务器连接</td>
</tr>
<tr>
<td>close</td>
<td>主动关闭 Channel</td>
</tr>
<tr>
<td>deregister</td>
<td></td>
</tr>
<tr>
<td>read</td>
<td>读数据</td>
</tr>
<tr>
<td>write</td>
<td>定局数据</td>
</tr>
<tr>
<td>flush</td>
<td>刷数据</td>
</tr>
</tbody></table>
<h1 id="ChannelInitializer"><a href="#ChannelInitializer" class="headerlink" title="ChannelInitializer"></a>ChannelInitializer</h1><p>装配 <code>handler</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel nioSocketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            nioSocketChannel.pipeline()</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> StringDecoder())</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> StringEncoder())</span><br><span class="line">                                    .addLast(handler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br></pre></td></tr></table></figure>

<p>在 <code>initChannel</code> 方法中装配各种 <code>handler</code> 以实现自己的业务逻辑。</p>
<h1 id="事件回调"><a href="#事件回调" class="headerlink" title="事件回调"></a>事件回调</h1><p><code>ChannelHandler</code> 的调用顺序。</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/NettyHandler%E9%93%BE.png" alt="NettyHandler链"></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker问题记录</title>
    <url>/2021/08/25/Docker%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Docker-客户端无法-push-到远程仓库"><a href="#Docker-客户端无法-push-到远程仓库" class="headerlink" title="Docker 客户端无法 push 到远程仓库"></a>Docker 客户端无法 push 到远程仓库</h1><ul>
<li>问题</li>
</ul>
<p>在使用 Docker 本地仓库时，push 镜像到仓库报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http: server gave HTTP response to HTTPS </span><br></pre></td></tr></table></figure>

<ul>
<li>原因</li>
</ul>
<p>docker 客户端使用的是 https 协议发起请求，而仓库使用的是 http 协议给出的响应</p>
<ul>
<li>解决方式</li>
</ul>
<p>在 <code>/etc/docker/deamon.json</code> 文件中添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;insecure-registries&quot; : &quot;192.168.3.202:8080&quot;</span><br></pre></td></tr></table></figure>
<p>如果是 mac 系统，在 docker ,操作方式如下：<br>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签下的 Insecure registries 列表中将地址添加到数组里。</p>
<blockquote>
<p>个人猜测， http 是不安全的请求，默认是发起 https 请求，所以需要将该列表添加进不安全列表中。</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2021/08/05/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h1><ul>
<li><code>⇞</code> Page Up（Fn+↑）</li>
<li><code>⇟</code> Page Down（Fn+↓）</li>
<li><code>Home</code> Fn + ←</li>
<li><code>End</code> Fn + →</li>
</ul>
<h1 id="Editing（编辑）"><a href="#Editing（编辑）" class="headerlink" title="Editing（编辑）"></a>Editing（编辑）</h1><ul>
<li><code>Command + Shift + Enter</code> 自动结束代码，行末自动添加分号</li>
<li><code>Command + P</code> 显示方法的参数信息</li>
<li><code>Control + J, Mid. button click</code> 快速查看文档</li>
<li><code>Shift + F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>
<li><code>Command + +鼠标放在代码上</code> 显示代码简要信息</li>
<li><code>Command + F1</code> 在错误或警告处显示具体描述信息</li>
<li><code>Command + N, Control + Enter, Control + N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>
<li><code>Control + O</code> 覆盖方法（重写父类方法）</li>
<li><code>Control + I</code> 实现方法（实现接口中的方法）</li>
<li><code>Command + Option + T</code> 包围代码（使用iF..else, try..catch, For, synchronized等包围选中的代码）</li>
<li><code>Command + /</code> 注释/取消注释与行注释</li>
<li><code>Command + Option/</code> 注释/取消注释与块注释</li>
<li><code>Option + ↑</code> 连续选中代码块</li>
<li><code>Option + ↓</code> 减少当前选中的代码块</li>
<li><code>Control + Shift + Q</code> 显示上下文信息</li>
<li><code>OptionEnter</code> 显示意向动作和快速修复代码</li>
<li><code>Command + Option + L</code> 格式化代码</li>
<li><code>Control + Option + O</code> 优化import</li>
<li><code>Control + Option + I</code> 自动缩进线</li>
<li><code>Tab / Shift + Tab</code> 缩进代码 / 反缩进代码</li>
<li><code>Command + X</code> 剪切当前行或选定的块到剪贴板</li>
<li><code>Command + C</code> 复制当前行或选定的块到剪贴板</li>
<li><code>Command + V</code> 从剪贴板粘贴</li>
<li><code>Command + Shift + V</code> 从最近的缓冲区粘贴</li>
<li><code>Command + D</code> 复制当前行或选定的块</li>
<li><code>Command + Delete</code> 删除当前行或选定的块的行</li>
<li><code>Control + Shift + J</code> 智能的将代码拼接成一行</li>
<li><code>Command + Enter</code> 智能的拆分拼接的行</li>
<li><code>Shift + Enter</code> 开始新的一行</li>
<li><code>Command + Shift + U</code> 大小写切换</li>
<li><code>Command + Shift + ] / Command + Shift + [</code> 切换 Tab 页</li>
<li><code>OptionFn + Delete</code> 删除到单词的末尾（Fn + Delete键为Fn+Delete）</li>
<li><code>Option + Delete</code> 删除到单词的开头</li>
<li><code>Command + +/Command + -</code> 展开 / 折叠代码块</li>
<li><code>Command + Shift + +</code> 展开所以代码块</li>
<li><code>Command + Shift + -</code> 折叠所有代码块</li>
<li><code>Command + W</code> 关闭活动的编辑器选项卡</li>
<li><strong>Command+Y 查看选中当前源码</strong></li>
</ul>
<h1 id="Search-Replace（查询-替换）"><a href="#Search-Replace（查询-替换）" class="headerlink" title="Search/Replace（查询/替换）"></a>Search/Replace（查询/替换）</h1><ul>
<li><code>Double Shift </code>(连按两下 Shift) 查询任何东西</li>
<li><code>Command + F</code> 文件内查找</li>
<li><code>Command + G</code> 查找模式下，向下查找</li>
<li><code>Command + Shift + G</code> 查找模式下，向上查找</li>
<li><code>Command + R</code> 文件内替换</li>
<li><code>Command + Shift + F</code> 全局查找（根据路径）</li>
<li><code>Command + Shift + R</code> 全局替换（根据路径）</li>
<li><code>Command + Shift + M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
</ul>
<h1 id="Usage-Search（使用查询）"><a href="#Usage-Search（使用查询）" class="headerlink" title="Usage Search（使用查询）"></a>Usage Search（使用查询）</h1><ul>
<li><code>OptionF7 / Command + F7</code> 在文件中查找用法 / 在类中查找用法</li>
<li><code>Command + Shift + F7</code> 在文件中突出显示的用法</li>
<li><code>Command + OptionF7</code> 显示用法</li>
</ul>
<h1 id="Compile-and-Run（编译和运行）"><a href="#Compile-and-Run（编译和运行）" class="headerlink" title="Compile and Run（编译和运行）"></a>Compile and Run（编译和运行）</h1><ul>
<li><code>Command + F9</code> 编译Project</li>
<li><code>Command + Shift + F9</code> 编译选择的文件、包或模块</li>
<li><code>Control + Option + R</code> 弹出 Run 的可选择菜单</li>
<li><code>Control + Option + D</code> 弹出 Debug 的可选择菜单</li>
<li><code>Control + R</code> 运行</li>
<li><code>Control + D</code> 调试</li>
<li><code>Control + Shift + R, Control + Shift + D</code> 从编辑器运行上下文环境配置</li>
</ul>
<h1 id="Debugging（调试）"><a href="#Debugging（调试）" class="headerlink" title="Debugging（调试）"></a>Debugging（调试）</h1><ul>
<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>
<li><code>Shift + F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>
<li><code>Shift + F8</code> 跳出</li>
<li><code>Option + F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>
<li><code>Option + F8</code> <strong>计算表达式（可以更改变量值使其生效）</strong></li>
<li><code>Command + OptionR</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>
<li><code>Command + F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>
<li><code>Command + Shift + F8</code> 查看断点信息</li>
</ul>
<h1 id="Navigation（导航）"><a href="#Navigation（导航）" class="headerlink" title="Navigation（导航）"></a>Navigation（导航）</h1><ul>
<li><code>Command + O</code> 查找类文件</li>
<li><code>Command + Shift + O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>
<li><code>Command + OptionO</code> 前往指定的变量 / 方法</li>
<li><code>Control + ← / Control + →</code> 左右切换打开的编辑tab页</li>
<li><code>F12</code> 返回到前一个工具窗口</li>
<li><code>Esc</code> 从工具窗口进入代码文件窗口</li>
<li><code>Shift + Esc</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>
<li><code>Command + Shift + F4</code> 关闭活动run/messages/Find/… tab</li>
<li><code>Command + L</code> 在当前文件跳转到某一行的指定处</li>
<li><code>Command + E</code> 显示最近打开的文件记录列表</li>
<li><code>Command + Option + ← / Command + Option + →</code> 退回 / 前进到上一个操作的地方</li>
<li><code>Command + Shift + Delete</code> 跳转到最后一个编辑的地方</li>
<li><code>Option + F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>
<li><code>Command + B / Command +  鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>
<li><code>Command + Option + B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>
<li><code>Command + Y</code> 快速打开光标所在方法、类的定义</li>
<li><code>Control + Shift + B</code> 跳转到类型声明处</li>
<li><code>Command + U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>
<li><code>Control + ↓ / Control + ↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>
<li><code>Command + ] / Command + [</code> 移动光标到当前所在代码的花括号开始/结束位置</li>
<li><code>Command + F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>
<li><code>Control + H</code> 显示当前类的层次结构</li>
<li><code>Command + Shift + H</code> 显示方法层次结构</li>
<li><code>Control + OptionH</code> 显示调用层次结构</li>
<li><code>F2 / Shift + F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>
<li><code>F4 / Command + ↓</code> 编辑/查看代码源</li>
<li><code>Option Home</code> 显示到当前文件的导航条</li>
<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>
<li><code>Option + F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>
<li><code>Control + 0...Control + 9</code> 定位到对应数值的书签位置</li>
<li><code>Command + F3</code> 显示所有书签</li>
</ul>
<h1 id="ReFactoring（重构）"><a href="#ReFactoring（重构）" class="headerlink" title="ReFactoring（重构）"></a>ReFactoring（重构）</h1><ul>
<li><code>F5</code> 复制文件到指定目录</li>
<li><code>F6</code> 移动文件到指定目录</li>
<li><code>Command + Delete</code> 在文件上为安全删除文件，弹出确认框</li>
<li><code>Shift + F6</code> 重命名文件</li>
<li><code>Command + F6</code> 更改签名</li>
<li><code>Command + Option + N</code> 一致性</li>
<li><code>Command + Option + M</code> 将选中的代码提取为方法</li>
<li><code>Command + Option + V</code> 提取变量</li>
<li><code>Command + Option + F</code> 提取字段</li>
<li><code>Command + Option + C</code> 提取常量</li>
<li><code>Command + Option +P</code> 提取参数</li>
</ul>
<h1 id="VCS-Local-History（版本控制-本地历史记录）"><a href="#VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="VCS/Local History（版本控制/本地历史记录）"></a>VCS/Local History（版本控制/本地历史记录）</h1><ul>
<li><code>Control + 9</code> 快速弹出版本控制器操作面板</li>
<li><code>Command + K</code> 提交代码到版本控制器</li>
<li><code>Command + T</code> 从版本控制器更新代码</li>
<li><code>Option + Shift + C</code> 查看最近的变更记录</li>
</ul>
<h1 id="Live-Templates（动态代码模板）"><a href="#Live-Templates（动态代码模板）" class="headerlink" title="Live Templates（动态代码模板）"></a>Live Templates（动态代码模板）</h1><ul>
<li><code>Command + Option + J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>
<li><code>Command + J</code> 插入自定义动态代码模板</li>
</ul>
<h1 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h1><ul>
<li><code>Command + 1...Command + 9</code> 打开相应编号的工具窗口</li>
<li><code>Command + S</code> 保存所有</li>
<li><code>Command + OptionY</code> 同步、刷新</li>
<li><code>Control + Command + F</code> 切换全屏模式</li>
<li><code>Command + Shift + F12</code> 切换最大化编辑器</li>
<li><code>Option + Shift + F</code> 添加到收藏夹</li>
<li><code>Option + Shift + I</code> 检查当前文件与当前的配置文件</li>
<li>Control + ` 快速切换当前的scheme（切换主题、代码样式等）</li>
<li><code>Command + ,</code> 打开IDEA系统设置</li>
<li><code>Command + ;</code> 打开项目结构对话框</li>
<li><code>Shift + Command + A</code> 查找动作（可设置相关选项）</li>
<li><code>Control + Tab</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>
</ul>
<h1 id="Other（一些官方文档上没有体现的快捷键）"><a href="#Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="Other（一些官方文档上没有体现的快捷键）"></a>Other（一些官方文档上没有体现的快捷键）</h1><ul>
<li><p><code>Command + Shift + 8</code> 竖编辑模式</p>
</li>
<li><p><code>Command + Shift + A</code> 查找动作 </p>
</li>
<li><p><code>Alt + F1</code> 快捷选择 </p>
</li>
<li><p><code>Command + Option+F7</code>  这个是查找选中的字符在工程中出现的地方，可以不是方法变量类等，这个和上面的有区别的</p>
</li>
<li><p><code>Command＋F7</code> 可以查询当前元素在当前文件中的引用，然后按F3可以选择 ，功能基本同上</p>
</li>
<li><p>选中文本，按 <code>Command + Shift + F7</code> ，高亮显示所有该文本，按Esc高亮消失。 </p>
</li>
<li><p><code>Option+F7 </code> 查找变量方法使用的地方 </p>
</li>
<li><p><code>Command + Shift + R </code> 可以在整个工程或着某个目录下面替换变量</p>
</li>
<li><p><code>Control + Shift + J </code> 把多行连接成一行，会去掉空格的行</p>
</li>
<li><p><code>Command + J </code> 可以生成一些自动代码，比如For循环</p>
</li>
<li><p><code>Command + B </code>找变量的来源  同F4   查找变量来源 </p>
</li>
<li><p><code>Control + Shift + B</code>  找变量所属的类</p>
</li>
<li><p><code>Command + G</code>  查找变量并且定位</p>
</li>
<li><p><code>Command + Shift + F</code>  可以在整个工程或着某个目录下面查找变量   相当于eclipse里的 <code>ctrl+H</code> </p>
</li>
<li><p><code>Option + Shift + C</code>  最近修改的文件</p>
</li>
<li><p><code>Command + Option+L</code>  格式化代码</p>
</li>
<li><p><code>Command + Shift + enter</code>  代码补全，这个会判断可能用到的，这个代码补全和代码提示是不一样的</p>
</li>
<li><p><code>Command + Option+T</code>  把选中的代码放在 TRY{} IF{} ELSE{} 里</p>
</li>
<li><p><code>Command + Option+/ </code> 注释/<em>…</em>/</p>
</li>
<li><p><code>Command + Option+左右箭头</code>  返回上次编辑的位置</p>
</li>
<li><p><code>Command + 左右箭头</code>  返回最左边最右边</p>
</li>
<li><p><code>Command + Shift + 上下箭头</code>  把代码上移或着下移</p>
</li>
<li><p><code>Command + F12</code> 可以显示当前文件的结构</p>
</li>
</ul>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell</title>
    <url>/2021/08/23/Linux-Shell/</url>
    <content><![CDATA[<blockquote>
<p>最近在组内推 git 提交规范，使用到了 shell 脚本，对一些内容再学习了一遍，做一个笔记。</p>
</blockquote>
<h1 id="Shell-的格式"><a href="#Shell-的格式" class="headerlink" title="Shell 的格式"></a>Shell 的格式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB慢查询分析</title>
    <url>/2021/10/21/MongoDB%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="MongoDB慢查询"><a href="#MongoDB慢查询" class="headerlink" title="MongoDB慢查询"></a>MongoDB慢查询</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.system.profile.find()</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;op&quot;</span>:<span class="string">&quot;query&quot;</span>,  #操作类型</span><br><span class="line">    <span class="attr">&quot;ns&quot;</span>:<span class="string">&quot;poseidon.business_order&quot;</span>,   #命名空间，db.collection</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>:&#123;   #执行的命令</span><br><span class="line">        <span class="attr">&quot;find&quot;</span>:<span class="string">&quot;business_order&quot;</span>, #操作的 collection</span><br><span class="line">        <span class="attr">&quot;filter&quot;</span>:&#123; # 条件 </span><br><span class="line">            <span class="attr">&quot;bizSystemOrderId&quot;</span>:<span class="string">&quot;1000342905&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;limit&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;10&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;shardVersion&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;$timestamp&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;t&quot;</span>:<span class="number">40</span>,</span><br><span class="line">                    <span class="attr">&quot;i&quot;</span>:<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;$oid&quot;</span>:<span class="string">&quot;5ef1ec758f212cb90e379041&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;lsid&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$binary&quot;</span>:<span class="string">&quot;6R/soj3ZQIGvvv0MWauOAw==&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;$type&quot;</span>:<span class="string">&quot;04&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$binary&quot;</span>:<span class="string">&quot;Y5mrDaxi8gv8RmdTsQ+1j7fmkr7JUsabhNmXAheU0fg=&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;$type&quot;</span>:<span class="string">&quot;00&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;$clusterTime&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;clusterTime&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$timestamp&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;t&quot;</span>:<span class="number">1634720101</span>,</span><br><span class="line">                    <span class="attr">&quot;i&quot;</span>:<span class="number">28</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;signature&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;hash&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$binary&quot;</span>:<span class="string">&quot;QIX3+Td22GwnDi+ln7RP16nt0o8=&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;$type&quot;</span>:<span class="string">&quot;00&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;keyId&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;6990046543956934658&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;$client&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;driver&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;PyMongo&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;3.8.0&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;os&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Linux&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;architecture&quot;</span>:<span class="string">&quot;x86_64&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;3.10.0-693.2.2.el7.x86_64&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;platform&quot;</span>:<span class="string">&quot;CPython 3.6.5.final.0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mongos&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>:<span class="string">&quot;g54g16057.cloud.cm3:3172&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;client&quot;</span>:<span class="string">&quot;10.80.239.136:52694&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;4.0.13&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;$configServerState&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;opTime&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;ts&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$timestamp&quot;</span>:&#123;</span><br><span class="line">                        <span class="attr">&quot;t&quot;</span>:<span class="number">1634720099</span>,</span><br><span class="line">                        <span class="attr">&quot;i&quot;</span>:<span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;t&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;$db&quot;</span>:<span class="string">&quot;poseidon&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keysExamined&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;docsExamined&quot;</span>:<span class="number">470765</span>,</span><br><span class="line">    <span class="attr">&quot;cursorExhausted&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;numYield&quot;</span>:<span class="number">3677</span>,</span><br><span class="line">    <span class="attr">&quot;nreturned&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;locks&quot;</span>:&#123; #锁信息</span><br><span class="line">        <span class="attr">&quot;Global&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;acquireCount&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;r&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;3680&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;Database&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;acquireCount&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;r&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;3678&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;Collection&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;acquireCount&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;r&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;3678&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;storage&quot;</span>:&#123; #存储信息</span><br><span class="line">        <span class="attr">&quot;data&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;bytesRead&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;478045859&quot;</span> #从磁盘放到缓存的字节数</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;timeReadingMicros&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;507960&quot;</span>  #操作花费的时间，单位:微秒</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;timeWaitingMicros&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;cache&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;$numberLong&quot;</span>:<span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;responseLength&quot;</span>:<span class="number">407</span>,  #返回的文档长度，单位:字节</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;op_msg&quot;</span>,  #消息的协议</span><br><span class="line">    <span class="attr">&quot;millis&quot;</span>:<span class="number">943</span>,  #从 MongoDB 开始操作到结束耗费的时间</span><br><span class="line">    <span class="attr">&quot;planSummary&quot;</span>:<span class="string">&quot;COLLSCAN&quot;</span>,  #操作形式，COLLSCAN 用于集合扫描，IXSCAN 用于扫描索引键，FETCH 用于检索文档</span><br><span class="line">    <span class="attr">&quot;replRole&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;stateStr&quot;</span>:<span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>:<span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty之HelloWorld</title>
    <url>/2021/07/30/Netty%E4%B9%8BHelloWorld/</url>
    <content><![CDATA[<p>Netty 的 Hello World 案例分成两部分。一部分是服务端，将接收到的消息打印出来即可。另外一部分是客户端，发送消息。</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(boss, worker)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel nioSocketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            nioSocketChannel.pipeline()</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> StringDecoder())</span><br><span class="line">                                    .addLast(<span class="keyword">new</span> SimpleChannelInboundHandler&lt;String&gt;() &#123;</span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                            System.out.println(<span class="string">&quot;server 接收到的消息&quot;</span> + s);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">            boss.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><ul>
<li>创建了两个反应器线程组，分别为 <code>boss</code> 和 <code>worker</code> ，<code>boss</code> 接收到请求后交由 <code>worker</code> 处理。</li>
</ul>
<h2 id="ServerBootstrap"><a href="#ServerBootstrap" class="headerlink" title="ServerBootstrap"></a>ServerBootstrap</h2><ul>
<li>服务端引导器，服务端引导器主要是为了进行一些配置，主要有以下配置。</li>
<li>group 配置线程组</li>
<li>channel 配置通道类型</li>
<li>childHandler 配置一些 Handler</li>
<li>绑定的地址和端口</li>
</ul>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(worker)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + <span class="string">&quot;: Hello world!!!&quot;</span>;</span><br><span class="line">                channel.writeAndFlush(msg);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="NioEventLoopGroup"><a href="#NioEventLoopGroup" class="headerlink" title="NioEventLoopGroup"></a>NioEventLoopGroup</h2><ul>
<li>在客户端，只有 <code>worker</code> 线程组，没有 <code>boss</code> ，只需要配置一个 <code>worker</code> 即可。</li>
</ul>
<p>其余与 <code>服务端</code> 大致类似。</p>
<p>最终效果，客户端控制台无任何输出。服务端控制台，每隔两秒钟就会打印当前时间 + Hello Wold 的字样。</p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty之IM初试</title>
    <url>/2021/08/02/Netty%E4%B9%8BIM%E5%88%9D%E8%AF%95/</url>
    <content><![CDATA[<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p><code>Netty</code> 最主要的功能就是网络编程，在学习 <code>Netty</code> 的过程中，我准备一边学一边完善一个小的学习项目。这是一个简单的 <code>Demo级</code> 的 <code>IM</code> 案例，要实现的东西也不多，主要包含以下功能:</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  一个服务端和两个客户端(同一台机器上)</p>
</li>
<li><p><input disabled="" type="checkbox">  客户端从控制台发送任务消息，服务端原样在控制台打印该消息，要对两个客户端分开进行标记。</p>
</li>
<li><p><input disabled="" type="checkbox">  服务端发送消息，所有客户端都能统一接收（单聊）。</p>
</li>
<li><p><input disabled="" type="checkbox">  服务端可以指定单独某一个客户端接收消息（群发）。</p>
</li>
</ul>
<h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><ul>
<li>服务端启动器</li>
</ul>
<h1 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h1>]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional</title>
    <url>/2021/07/27/Optional/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bName;</span><br><span class="line">    <span class="keyword">private</span> String bAge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getbName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbName</span><span class="params">(String bName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bName = bName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getbAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbAge</span><span class="params">(String bAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bAge = bAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>已经存在两个类，并且互相嵌套，而且不允许修改， A 、B 两个类的结构，我们要安全的访问 A B中的值，尽可能少的使用 <code>if</code> 语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;A&gt; a1 = Optional.ofNullable(a);</span><br><span class="line">Optional&lt;B&gt; b = a1.filter((t) -&gt; t.getB() != <span class="keyword">null</span>).map(A::getB);</span><br><span class="line"><span class="comment">// 上面一行代码的问题是， t 有可能会为 null ,从而引发 NPE</span></span><br><span class="line">B b2 = b.get();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;A&gt; a1 = Optional.ofNullable(a);</span><br><span class="line">Optional&lt;B&gt; b = a1.map(A::getB);</span><br><span class="line">b.get(); <span class="comment">// 有可能会抛异常,因为如果 b 为 null,那么得到的 Optional 为 empty 创建的</span></span><br><span class="line">b.orElse(<span class="keyword">new</span> B()); <span class="comment">// 没有问题，返回 new B 的对象</span></span><br><span class="line">b.orElseGet(() -&gt; B :: <span class="keyword">new</span>); <span class="comment">// 没有问题，返回 new B 的对象</span></span><br><span class="line">b.orElseThrow(() -&gt; YdException::<span class="keyword">new</span>);  <span class="comment">// 手动抛出异常</span></span><br></pre></td></tr></table></figure>



<h1 id="使用-Optional-带来的变化"><a href="#使用-Optional-带来的变化" class="headerlink" title="使用 Optional 带来的变化"></a>使用 Optional 带来的变化</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonNoOptional</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码是没有使用 Optional 时候，我们经常会写的样式。会出现的问题：</p>
<ul>
<li>如果某个值为 null，立马会报出 NPE</li>
</ul>
<p>我们的解决方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PersonNoOptional p = <span class="keyword">new</span> PersonNoOptional();</span><br><span class="line"></span><br><span class="line">        PersonNoOptional.Car car = p.getCar();</span><br><span class="line">        <span class="keyword">if</span> (car != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// ....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会添加很多的 <code>if</code> 来进行判断，甚至还有空对象设计模式(Null Object Pattern) 来处理这一类的问题。Java 8 为我们带来了 <code>Optional</code> 添加新的解决方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonOptional</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;PersonNoOptional.Car&gt; car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;PersonNoOptional.Car&gt; getCar() &#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(PersonNoOptional.Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = Optional.of(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Peron 有可能会没有 Car，但是每一辆 Car 都必须有 name，所以我们对 Car 使用了 Optional 包装，而 name 没有使用 Optional 的原因就在这里。</p>
<h1 id="Optional-的创建"><a href="#Optional-的创建" class="headerlink" title="Optional 的创建"></a>Optional 的创建</h1><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><p>创建一个空的 <code>Optional</code> 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Object&gt; empty = Optional.empty();</span><br></pre></td></tr></table></figure>

<h2 id="empty-方法的实现"><a href="#empty-方法的实现" class="headerlink" title="empty() 方法的实现"></a>empty() 方法的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional&lt;?&gt; EMPTY = <span class="keyword">new</span> Optional&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.value = <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Optional&lt;T&gt; <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;B&gt; optionalB = Optional.of(<span class="keyword">new</span> B());</span><br></pre></td></tr></table></figure>

<p>of 方法中的参数如果为 null,会发生 NPE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Object&gt; optional = Optional.of(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="of-方法的实现"><a href="#of-方法的实现" class="headerlink" title="of() 方法的实现"></a>of() 方法的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Objects.requireNonNull 的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = Objects.requireNonNull(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">of</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Optional&lt;&gt;(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h2><p>ofNullable 允许传入的参数为 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;A&gt; optonal = Optional.ofNullable(a);</span><br></pre></td></tr></table></figure>



<h2 id="ofNullable-的实现"><a href="#ofNullable-的实现" class="headerlink" title="ofNullable 的实现"></a>ofNullable 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>#Optinal 中获取值</p>
<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = optionalA.get();</span><br></pre></td></tr></table></figure>

<p>如果 <code>Optional</code> 容器中不存在值，会抛出异常 <code>NoSuchElementException(&quot;No value present&quot;)</code></p>
<h2 id="get-的实现"><a href="#get-的实现" class="headerlink" title="get 的实现"></a>get 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;No value present&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = optionalA.orElse(<span class="keyword">new</span> A());</span><br></pre></td></tr></table></figure>

<p>如果 <code>Optional</code> 容器中不存在值，使用 <code>orElse</code> 方法中定义的值。</p>
<h2 id="orElse-的实现"><a href="#orElse-的实现" class="headerlink" title="orElse 的实现"></a>orElse 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = optionalA.orElseGet(A::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<p>如果 <code>Optional</code> 容器中不存在值，会执行定义的函数。</p>
<h2 id="orElseGet-的实现"><a href="#orElseGet-的实现" class="headerlink" title="orElseGet 的实现"></a>orElseGet 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="orElseThrow"><a href="#orElseThrow" class="headerlink" title="orElseThrow"></a>orElseThrow</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = optionalA.orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<p>如果 <code>Optional</code> 容器中不存在值，会抛出指定的异常。与 <code>get</code> 方法的区别是，<code>get</code> 方法抛出的异常为固定的，该方法可以抛出指定的异常。</p>
<h2 id="orElseThrow-的实现"><a href="#orElseThrow-的实现" class="headerlink" title="orElseThrow 的实现"></a>orElseThrow 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>Optional</code> 容器中的值为空时，使用了 <code>throw</code> 关键字。</p>
<h1 id="map-和-flatMap"><a href="#map-和-flatMap" class="headerlink" title="map 和 flatMap"></a>map 和 flatMap</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Name bName;</span><br><span class="line">    <span class="keyword">private</span> String bAge;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Name <span class="title">getbName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbName</span><span class="params">(Name bName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bName = bName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getbAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbAge</span><span class="params">(String bAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bAge = bAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A B 两个类的结构关系是互相嵌套，我们要取出 b.Name.getName() 的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; aName = optionalA.map(A::getB)</span><br><span class="line">  .map(B::getbName)</span><br><span class="line">  .map(B.Name::getName);</span><br><span class="line">System.out.println(aName.orElse(<span class="string">&quot;kkk&quot;</span>));</span><br></pre></td></tr></table></figure>



<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>如果 B 在 A 的嵌套中，使用了 Optional 包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;B&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;B&gt; <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再使用上面的访问，就会编译报错。</p>
<p>原因:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Optional&lt;B&gt;&gt; optional = optionalA.map(A::getB);</span><br></pre></td></tr></table></figure>

<p>map 的返回外面被包装了一层 <code>Optional</code> ，想要达到上面的效果，需要拆掉一层 <code>Optional</code> 的包装，那么此时就可以使用 <code>flatMap</code> 来打散一层 <code>Optional</code> 的包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String kkk = optionalA.flatMap(A::getB)</span><br><span class="line">  .map(B::getbName)</span><br><span class="line">  .map(B.Name::getName)</span><br><span class="line">  .orElse(<span class="string">&quot;kkk&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>ypxh就可以顺利访问了</p>
<blockquote>
<p>map 和 flatMap 的区别在于，flatMap 会进行拆包(将外面的层包装拆除)的动作，而 map 不会进行拆包</p>
</blockquote>
<h1 id="Optional-提供的其他方法"><a href="#Optional-提供的其他方法" class="headerlink" title="Optional 提供的其他方法"></a>Optional 提供的其他方法</h1><h2 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent"></a>isPresent</h2><p>isPresent 用于判断 <code>Optional</code> 容器中值是否为空(null)，不为空返回会 true，空返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ifPresent"><a href="#ifPresent" class="headerlink" title="ifPresent"></a>ifPresent</h2><p>ifPresent 提供了执行函数式代码的能力，当 <code>Optional</code> 容器中的值不为空时，会执行传入的函数式代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">optionalA.ifPresent(c -&gt; System.out.println(c.getB()));</span><br></pre></td></tr></table></figure>

<h3 id="ifPresent-的实现"><a href="#ifPresent-的实现" class="headerlink" title="ifPresent 的实现"></a>ifPresent 的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">    consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>通过执行传入的<code>谓词</code> 进行过滤，如果传入的 <code>谓词</code> 执行结果为 <code>true</code> 返回 <code>Optional</code> 容器本身，否则返回空容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span> </span>&#123;</span><br><span class="line">  Objects.requireNonNull(predicate);</span><br><span class="line">  <span class="keyword">if</span> (!isPresent())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> predicate.test(value) ? <span class="keyword">this</span> : empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java8</category>
      </categories>
      <tags>
        <tag>optional</tag>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty组件</title>
    <url>/2021/07/28/Netty%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/NioEventLoopGroup%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="NioEventLoopGroup继承关系"></p>
<h2 id="NioEventLoopGroup"><a href="#NioEventLoopGroup" class="headerlink" title="NioEventLoopGroup"></a>NioEventLoopGroup</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br></pre></td></tr></table></figure>

<ul>
<li>创建的 boss 和 worker 就是 NioEventLoopGroup</li>
</ul>
<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/Bootstrap%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="Bootstrap继承关系"></p>
<h2 id="ServerBootstrap"><a href="#ServerBootstrap" class="headerlink" title="ServerBootstrap"></a>ServerBootstrap</h2><ul>
<li>服务端引导器</li>
</ul>
<h2 id="Bootstrap-1"><a href="#Bootstrap-1" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><ul>
<li>客户端引导器</li>
</ul>
<p>引导器的作用主要作用:</p>
<ul>
<li>boss 和 worker 的指定</li>
<li>设置 Channel 类型</li>
<li>Handler 设置</li>
<li>TCP 参数设置</li>
<li>端口绑定</li>
</ul>
<h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h1><h2 id="NioServerSocketChannel"><a href="#NioServerSocketChannel" class="headerlink" title="NioServerSocketChannel"></a>NioServerSocketChannel</h2><ul>
<li>服务端 Channel 类型</li>
</ul>
<h2 id="NioSocketChannel"><a href="#NioSocketChannel" class="headerlink" title="NioSocketChannel"></a>NioSocketChannel</h2><ul>
<li>客户端 Channel 类型</li>
</ul>
<h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><ul>
<li>为 <code>boss</code> 设置 TCP 参数</li>
</ul>
<h1 id="ChildOption"><a href="#ChildOption" class="headerlink" title="ChildOption"></a>ChildOption</h1><ul>
<li>为 <code>worker</code> 设置 TCP 参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SO_KEEPALIVE</td>
<td>设置为 true 代表启用了 TCP SO_KEEPALIVE 属性，TCP 会主动探测连接状态，即连接保活</td>
</tr>
<tr>
<td>SO_BACKLOG</td>
<td>已完成三次握手的请求队列最大长度，同一时刻服务端可能会处理多个连接，在高并发海量连接的场景下，该参数应适当调大</td>
</tr>
<tr>
<td>TCP_NODELAY</td>
<td>Netty 默认是 true，表示立即发送数据。如果设置为 false 表示启用 Nagle 算法，该算法会将 TCP 网络数据包累积到一定量才会发送，虽然可以减少报文发送的数量，但是会造成一定的数据延迟。Netty 为了最小化数据传输的延迟，默认禁用了 Nagle 算法</td>
</tr>
<tr>
<td>SO_SNDBUF</td>
<td>TCP 数据发送缓冲区大小</td>
</tr>
<tr>
<td>SO_RCVBUF</td>
<td>TCP数据接收缓冲区大小，TCP数据接收缓冲区大小</td>
</tr>
<tr>
<td>SO_LINGER</td>
<td>设置延迟关闭的时间，等待缓冲区中的数据发送完成</td>
</tr>
<tr>
<td>CONNECT_TIMEOUT_MILLIS</td>
<td>建立连接的超时时间</td>
</tr>
</tbody></table>
<h1 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/NettyHandler%E9%93%BE.png"></p>
<h2 id="ChannelInboundHandler"><a href="#ChannelInboundHandler" class="headerlink" title="ChannelInboundHandler"></a>ChannelInboundHandler</h2><p>入站处理器</p>
<h2 id="ChannelOutboundHandler"><a href="#ChannelOutboundHandler" class="headerlink" title="ChannelOutboundHandler"></a>ChannelOutboundHandler</h2><p>出站处理器</p>
<h2 id="Pipline"><a href="#Pipline" class="headerlink" title="Pipline"></a>Pipline</h2><h2 id="Future-amp-Promise"><a href="#Future-amp-Promise" class="headerlink" title="Future&amp;Promise"></a>Future&amp;Promise</h2><h1 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h1><h2 id="ByteBuf-的分类"><a href="#ByteBuf-的分类" class="headerlink" title="ByteBuf 的分类"></a>ByteBuf 的分类</h2><ul>
<li><p>池化/非池化的 ByteBuf</p>
</li>
<li><p>直接内存/堆内存的 ByteBuf</p>
</li>
<li><p>Unsafe/非Unsafe的ByteBuf</p>
</li>
</ul>
<h2 id="ByteBuf-的内部结构"><a href="#ByteBuf-的内部结构" class="headerlink" title="ByteBuf 的内部结构"></a>ByteBuf 的内部结构</h2><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/ByteBuf%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt="ByteBuf内部结构"></p>
<ul>
<li>readerIndex : 读指针</li>
<li>writrerIndexer : 写指针</li>
<li>maxCapactity : 最大容量</li>
</ul>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul>
<li>Unpooled</li>
<li>Pooled</li>
</ul>
<h3 id="指针操作"><a href="#指针操作" class="headerlink" title="指针操作"></a>指针操作</h3><ul>
<li>readerIndex</li>
<li>resetReaderIndex</li>
<li>markReaderIndex</li>
<li>writerIndex</li>
<li>resetWriterIndex</li>
<li>markWriterIndex</li>
<li>setIndex</li>
</ul>
<h3 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h3><ul>
<li><p>isReadable</p>
</li>
<li><p>isReadOnly</p>
</li>
<li><p>asReadOnly</p>
</li>
<li><p>readableBytes</p>
</li>
<li><p>readBytes</p>
</li>
<li><p>readSlice</p>
</li>
<li><p>readRetainedSlice</p>
</li>
<li><p>readType</p>
<ul>
<li><p>readByte()</p>
</li>
<li><p>readChar()</p>
</li>
<li><p>readBoolean()</p>
</li>
<li><p>readShort()</p>
</li>
<li><p>readInt()</p>
</li>
<li><p>readLong()</p>
</li>
<li><p>readFloat()</p>
</li>
<li><p>readDouble()</p>
</li>
</ul>
</li>
<li><p>isWritable()</p>
</li>
<li><p>writeBytes(ByteBuf src)</p>
</li>
<li><p>writeCharSequence(CharSequence sequence, Charset charset)</p>
</li>
<li><p>writeType</p>
<ul>
<li>writeBoolean(boolean value)</li>
<li>writeByte(int value)</li>
<li>writeShort(int value)</li>
<li>writeInt(int value)</li>
<li>writeLong(long value)</li>
<li>writeChar(int value)</li>
<li>writeFloat(float value)</li>
<li>writeDouble(double value)</li>
</ul>
</li>
</ul>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><ul>
<li>refCnt()</li>
<li>retain()<ul>
<li>retain(int increment)</li>
</ul>
</li>
<li>touch()<ul>
<li>touch(Object hint)</li>
</ul>
</li>
<li>release()<ul>
<li>release(int decrement)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Reactor模型</title>
    <url>/2021/07/28/Reactor%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Netty-Reactor线程模型"><a href="#Netty-Reactor线程模型" class="headerlink" title="Netty Reactor线程模型"></a>Netty Reactor线程模型</h1><h2 id="单线程-Reactor"><a href="#单线程-Reactor" class="headerlink" title="单线程 Reactor"></a>单线程 Reactor</h2><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E5%8D%95%E7%BA%BF%E7%A8%8BReactor%E6%A8%A1%E5%9E%8B.png" alt="单线程Reactor模型"></p>
<ul>
<li>acceptor 事件读取</li>
<li> dispatch 事件分发 </li>
<li>read 读</li>
<li>send 发送</li>
</ul>
<p>以上操作这都都是在一个线程里完成，缺陷很明显。一次只能由一个事件进行，该事件未完成，后面的事件只能无法执行。</p>
<h2 id="多线程-Reactor"><a href="#多线程-Reactor" class="headerlink" title="多线程 Reactor"></a>多线程 Reactor</h2><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8BReactor%E6%A8%A1%E5%9E%8B.png" alt="多线程Reactor模型"></p>
<p>该模型由单线程 Reactor 模型改进而来，每个连接对应一个线程。后续的处理流程于单线程模型一致。</p>
<h2 id="主从-Reactor"><a href="#主从-Reactor" class="headerlink" title="主从 Reactor"></a>主从 Reactor</h2><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E4%B8%BB%E4%BB%8EReactor%E6%A8%A1%E5%9E%8B.png" alt="主从Reactor模型"></p>
<ul>
<li>MainReactor 只负责连接事件监听，当 client 连接以后，将后续的处理交给 SubReactor 来完成。与 Nginx 中的 master 进程原理一致，接收请求后本身不处理请求交由对应的 worker 来处理。 </li>
</ul>
<p><strong>做 Netty 开发时，选择的都是主从 Reactor 模型。</strong></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>Reactor模型</tag>
      </tags>
  </entry>
  <entry>
    <title>git hooks——commit message 校验</title>
    <url>/2021/08/23/git-hooks%E2%80%94%E2%80%94commit-message-%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>git是现在最流行的版本控制工具，书写良好的commit message能大大提高代码维护的效率。但是在日常开发中由于缺少对于commit message的约束，导致填写内容随意、质量参差不齐，可读性低亦难以维护。在项目中引入commit message规范已是迫在眉睫。</p>
</blockquote>
<h1 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h1><ul>
<li><p>源于 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">Angular 规范</a></p>
</li>
<li><p>提交格式 <code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>
</li>
<li><p>commit message 示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feat(数据中心): HS001 增加订单列表</span><br></pre></td></tr></table></figure></li>
<li><p>type 选项</p>
<ul>
<li>feat：新功能（feature）</li>
<li>fix：修补bug</li>
<li>docs：文档（documentation）</li>
<li>style： 格式（不影响代码运行的变动）</li>
<li>   refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>
<li>test：增加测试</li>
<li>chore：构建过程或辅助工具的变动</li>
<li>perf: 性能提升变更</li>
<li>ci : 持续集成变更</li>
<li>build ： 代码构建变更</li>
<li>temp ： 临时代码</li>
</ul>
</li>
<li><p>scope</p>
<ul>
<li>变更范围(粒度较小，并在一想 项目中保持一致)：例如页面名称、模块名称、组件名称……</li>
</ul>
</li>
<li><p>subject</p>
<ul>
<li>简短的描述</li>
</ul>
</li>
</ul>
<h1 id="添加-hook"><a href="#添加-hook" class="headerlink" title="添加 hook"></a>添加 hook</h1><ul>
<li>在目前添加在本地的 <code>git hook</code> 中，校验阶段是 <code>commit-msg</code> 阶段。脚本内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">msg=`awk <span class="string">&#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27;</span> <span class="variable">$1</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># Merge 的时候，会自动生成 Commit Message, 长成这样的: Merge branch &#x27;master&#x27; into test-abc, 这种跳过</span></span><br><span class="line">mergePatten=<span class="string">&#x27;^Merge &#x27;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$msg</span> =~ <span class="variable">$mergePatten</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;😁😁😁合并分支自动生成的 CommitMessage, 跳过!&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非 Merge 开头的，认为是手动提交的信息，需要遵循这种格式</span></span><br><span class="line">patten=<span class="string">&#x27;^(feat|fix|test|refactor|docs|style|chroe)\(.*\):.*$&#x27;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$msg</span> =~ <span class="variable">$patten</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;😁😁😁太棒了!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;😭😭😭 兄弟，别瞎搞提交的 message 格式不对&quot;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;提交参考格式: &lt;类型&gt;[可选的作用域]: &lt;描述&gt;&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加目录</li>
</ul>
<p>将上面的脚本保存成 <code>commit-msg</code> 文件，然后进行以下操作。</p>
<p>工程<code>.git</code> 目录 -&gt; hooks -&gt; commit-msg</p>
<blockquote>
<p>hooks 目录中会存在 commit-msg.sample，这是 git 的 hook 参考文件。</p>
</blockquote>
<h1 id="全局添加"><a href="#全局添加" class="headerlink" title="全局添加"></a>全局添加</h1><p>如果每个工程的 <code>.git</code> 目录下的 <code>hooks</code> 都添加一遍会过于繁琐，使用全局的会很省事(可选)。</p>
<ul>
<li><p>在 <code>home</code> 目录下创建 <code>.git_hook</code> 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.git_hooks</span><br></pre></td></tr></table></figure></li>
<li><p>复制 <code>commit-msg</code> 文件到上面创建的 <code>.git_hook</code> 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp comit-msg /.git_hooks</span><br></pre></td></tr></table></figure></li>
<li><p>全局添加该脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.hooksPath ~/.git_hooks</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hook</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2021/07/21/http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="客户端-Client"><a href="#客户端-Client" class="headerlink" title="客户端(Client)"></a>客户端(Client)</h2><ul>
<li>发起 <code>http</code> 请求的一方称为<code>客户端</code>，一般是<code>浏览器</code>，比如常见的 <code>Chrome</code>、<code>360浏览器</code>、<code>MicroSoft Edge</code>、<code>Safair浏览器</code> 等；除了浏览器还有一些能够发起 http 请求的软件，比如: <code>postman</code>、<code>Jmeter</code> 等。</li>
</ul>
<h2 id="服务端-Server"><a href="#服务端-Server" class="headerlink" title="服务端(Server)"></a>服务端(Server)</h2><ul>
<li>提供 <code>http</code> 服务的一方称为 <code>服务端</code>，一般是各种 <code>Web服务器</code>。</li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/epub_907764_17.jpeg"></p>
<blockquote>
<p>http 请求是请求-响应模式，也就是一发出一次请求，会收到一次应签。</p>
</blockquote>
<h2 id="客户端和服务端通信"><a href="#客户端和服务端通信" class="headerlink" title="客户端和服务端通信"></a>客户端和服务端通信</h2><ul>
<li>HTTP协议规定，请求从客户端发出，最后服务器端响应该请求并返回。先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1.jpeg" alt="img"></p>
<h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>请求报文是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的。</li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5.jpeg" alt="img"></p>
<h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1200 OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 10 Jul 2012 06:50:15 GMT</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>362</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E5%93%8D%E5%BA%94%E4%BD%93.jpeg" alt="img"></p>
<ul>
<li>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。稍后我们会对这些内容进行详细说明。</li>
</ul>
<h2 id="http无状态"><a href="#http无状态" class="headerlink" title="http无状态"></a>http无状态</h2><ul>
<li>HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。</li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/http%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%8A%B6%E6%80%81.jpeg" alt="img"></p>
<ul>
<li>使用HTTP协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。</li>
</ul>
<p>在很多情况下，我们需要一些状态。比如用户是否已经登录，就需要使用 <code>Cookie</code> 做一些存储。</p>
<h2 id="URL-URI"><a href="#URL-URI" class="headerlink" title="URL(URI)"></a>URL(URI)</h2><ul>
<li><p>url 对资源进行定位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="http-method-请求方法"><a href="#http-method-请求方法" class="headerlink" title="http method(请求方法)"></a>http method(请求方法)</h2><table>
<thead>
<tr>
<th>请求方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取资源</td>
</tr>
<tr>
<td>POST</td>
<td>传输实体</td>
</tr>
<tr>
<td>PUT</td>
<td>传输文件(在 Restful 中主要用于修改资源)</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除文件</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>询问支持的方法</td>
</tr>
<tr>
<td>TRACE</td>
<td>追踪</td>
</tr>
<tr>
<td>CONNECT</td>
<td>建立连接</td>
</tr>
</tbody></table>
<h1 id="HTTP-协议报文"><a href="#HTTP-协议报文" class="headerlink" title="HTTP 协议报文"></a>HTTP 协议报文</h1><ul>
<li>http协议分为头部和主体，中间用一个空行隔开。</li>
</ul>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/http%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B.jpg" alt="url请求"></p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/http%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9.jpg" alt="http协议请求内容"></p>
<ul>
<li>请求行，包含请求的方法，请求的 url 和协议版本号</li>
<li>状态行，http 请求的响应状态</li>
<li>头部字段，一些标准的或者自定义的 http 头字段</li>
<li>其他</li>
</ul>
<h1 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h1><table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>Informational(信息状态码)</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2xx</td>
<td>Success(成功状态码)</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>Redirection(重定向状态码)</td>
<td>需要请求其他操作</td>
</tr>
<tr>
<td>4xx</td>
<td>Client Error(客户端错误)</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>Server Error(服务端错误)</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><ul>
<li>200: ok 请求成功</li>
<li>204: Not Content</li>
<li>206: Partial Content</li>
</ul>
<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><ul>
<li>301: Moved Permanently，永久重定向</li>
<li>302: Found，临时重定向</li>
<li>303: See Other，对应另外一个资源，应该由 GET 请求去获取</li>
<li>304: Not Modified，虽然同属 3xx 系列，但是与重定向无关。含义：服务端资源未改变，可直接使用客户端未过期缓存。</li>
<li>307: Temporary Redirect，临时重定向，与 302 含义相同，但是如果发起的是 POST 请求，重定向时不会改成 GET(301、302会将 POST 请求改成 GET)</li>
</ul>
<h2 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h2><ul>
<li>400: Bad Request，请求报文中存在语法错误</li>
<li>401: Unauthorized，没有通过认证</li>
<li>403: Forbidden，请求被拒绝</li>
<li>404: Not Found，资源无法找到</li>
</ul>
<h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><ul>
<li>500: Internal Server Error，服务器内部发错误</li>
<li>502: Bad Gateway，网关错误</li>
<li>503: Service Unavliaable，服务不可访问(有可能是服务端负载过高)</li>
</ul>
<h1 id="http请求头字段"><a href="#http请求头字段" class="headerlink" title="http请求头字段"></a>http请求头字段</h1><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><ul>
<li>操作缓存</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private</span><br></pre></td></tr></table></figure>

<ul>
<li><p>public，所有人都可以使用该缓存</p>
</li>
<li><p>private，对特定用户使用缓存</p>
</li>
<li><p>no-cache，不使用缓存，如果有缓存不会向服务器验证该缓存。</p>
<ul>
<li>请求中包含 <code>no-cache</code> 代表不从缓存中接收响应。</li>
<li>响应中包含 <code>no-cache</code> 代表不能将响应缓存。</li>
</ul>
</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br></pre></td></tr></table></figure>

<ul>
<li>no-cache=名称，对指定字段不进行缓存</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache=Location</span><br></pre></td></tr></table></figure>

<ul>
<li><p>no-store，<strong>不使用缓存</strong> ，这个字段的真正含义是不使用缓存，对 <code>no-cache</code> 是有一定区别的。</p>
</li>
<li><p>max-age，指定缓存时间；如果当 <code>max-age=0</code> 时，表示缓存过期必须将该请求交给服务器而不是缓存服务器进行处理。</p>
</li>
<li><p>s-maxage，这个字段有点懵，在致意思和 <code>max-age</code> 类似。</p>
</li>
<li><p>min-fresh，指定多少秒以内未过期的资源。例如: <code>Cache-Control: min-fresh=60</code> 返回 60 秒内未过期的数据。</p>
</li>
<li><p>max-stable，如果为空表示无论过期多久的数据都接收，如果指定具体时间则表示接收指定时间内的过期数据。</p>
</li>
<li><p>only-if-cached，懵的</p>
</li>
<li><p>must-revalidate，代理服务器验证缓存的响应信息。</p>
</li>
<li><p>proxy-revalidate，缓存服务器返回响应之前，再次验证缓存的有效性。</p>
</li>
<li><p>no-transform，禁止缓存转换媒体类型。</p>
</li>
<li><p>扩展，</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private, Community=&quot;UCI&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展了 <code>Community</code> 字段，如果服务器能处理则会处理，不能处理会默认丢掉该字段。</li>
</ul>
</li>
</ul>
<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p><code>Connection</code> 有两个作用: </p>
<ul>
<li>控制不再转发给代理的头部字段</li>
<li>管理持久链接</li>
</ul>
<p>不转发字段:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br></pre></td></tr></table></figure>

<ul>
<li>不再转发 <code>Upgrade</code> 字段的内容，同时 <code>Upgrade</code> 表示协议升级，一般是从 <code>http</code> 升级到 <code>websocket</code> 协议。</li>
</ul>
<p>管理持久链接</p>
<ul>
<li>Close，告诉服务端需要和它断开链接。</li>
<li>Keep-Alive，维持持久链接。</li>
</ul>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>表明创建 <code>http报文</code> 的日期。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 26 Jul 2021 13:31:04 GMT</span><br></pre></td></tr></table></figure>

<h2 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h2><p>规定了传输报文时采用的编码方式。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br></pre></td></tr></table></figure>

<h2 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h2><p>一般用于切换协议或升级协议，对于切换协议，服务器会响应一个 <code>101</code> 状态码。</p>
<h2 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h2><p>告诉服务器，客户端能够处理的媒体类型以及对应的优先级(权重)。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br></pre></td></tr></table></figure>

<p>这里的内容是以 <code>,逗号</code> 进行分隔且默认的 <code>q=1.0</code>。 </p>
<p>参考内容:<a href="https://time.geekbang.org/column/article/104024">https://time.geekbang.org/column/article/104024</a></p>
<h2 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h2><ul>
<li>gzip</li>
<li>compress</li>
<li>default</li>
<li>identity</li>
</ul>
<h2 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h2><p>指定返回的字符集</p>
<h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><p><code>http</code> 认证字段，在浏览器返回 <code>401</code> 的情况下需要加该字段。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic xxdfhaofaoifjklasdfwsaytropqw</span><br></pre></td></tr></table></figure>

<h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>请求的资源的主机名和端口号</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br></pre></td></tr></table></figure>



<h1 id="http响应头字段"><a href="#http响应头字段" class="headerlink" title="http响应头字段"></a>http响应头字段</h1><h2 id="Accept-Range"><a href="#Accept-Range" class="headerlink" title="Accept-Range"></a>Accept-Range</h2><p>用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。</p>
<ul>
<li>bytes ：可以处理</li>
<li>none：不能处理</li>
</ul>
<h2 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h2><p>告知客户端，源服务端在多久前创建的响应。单位：秒</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Age</span><span class="punctuation">: </span>60</span><br></pre></td></tr></table></figure>

<h2 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h2><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>对该值进行重定向访问，一般配合 3xx 响应状态码使用。</p>
<h2 id="Proxy-Authenticate"><a href="#Proxy-Authenticate" class="headerlink" title="Proxy-Authenticate"></a>Proxy-Authenticate</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Proxy-Authenticate</span><span class="punctuation">: </span>Basic realm=&quot;Usingauth xxxx&quot;</span><br></pre></td></tr></table></figure>

<p>代理服务器的认证信息发送给客户端。</p>
<h2 id="Retry-After"><a href="#Retry-After" class="headerlink" title="Retry-After"></a>Retry-After</h2><p>在多少秒之后再次发起请求。单位：秒，字段值也可以指定具体的秒。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Retry-After</span><span class="punctuation">: </span>120</span><br></pre></td></tr></table></figure>

<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>告诉客户端服务的应用程序相关信息，一般会显示服务端使用的软件，版本号会隐藏。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span><span class="punctuation">: </span>nginx</span><br></pre></td></tr></table></figure>

<h2 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h2><p>告诉客户端，对实体采用的压缩格式。采用最多的是 <code>gzip</code> 。</p>
<h2 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h2><p>告诉客户端，语言类型</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Language</span><span class="punctuation">: </span>zh-CN</span><br></pre></td></tr></table></figure>

<h2 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h2><p>说明媒体类型，<code>charset</code> 用于指定字符类集。</p>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie-1"><a href="#Cookie-1" class="headerlink" title="Cookie"></a>Cookie</h2><p>发起请求时，头部字段带的。</p>
<h2 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h2><p>响应结果时，响应头带的。</p>
<h2 id="Cookie的属性"><a href="#Cookie的属性" class="headerlink" title="Cookie的属性"></a>Cookie的属性</h2><h3 id="NAME-VALUE"><a href="#NAME-VALUE" class="headerlink" title="NAME=VALUE"></a>NAME=VALUE</h3><p>对 <code>cookie</code> 进行赋值</p>
<h3 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h3><p>指定 <code>cookie</code> 的过期时间，不设就表明直到浏览器关闭之前有效。</p>
<h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>指定 <code>cookie</code> 的发送范围，一般是 <code>/</code> 斜杠。</p>
<h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p><code>Cookie</code> 适用的域名，不写默认是创建 <code>cookie</code> 的域名。</p>
<h3 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h3><p>只有在使用 <code>https</code> 时才可以发送 <code>cookie</code> 。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>name=value; Secure</span><br></pre></td></tr></table></figure>

<h3 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h3><p>js脚本无法操作 <code>cookie</code> </p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>name=value; HttpOnaly</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Netty心语一二</title>
    <url>/2021/07/30/%E5%85%B3%E4%BA%8ENetty%E5%BF%83%E8%AF%AD%E4%B8%80%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="我为什么学Netty"><a href="#我为什么学Netty" class="headerlink" title="我为什么学Netty"></a>我为什么学Netty</h1><p>我为什么学 <code>Netty</code> 我现在想想，当初最主要的原因还是因为焦虑。回想自己，<strong>2016</strong> 年怀着满腔热血到上海从事了第一份 <code>Java</code> 后端开发的工作。我清楚的记得那个时候因为 <code>DBCP</code> 连接池的一个参数，困惑了大概一个礼拜的时间。当初的原因是 <code>DBCP</code> 连接池的 <code>class</code> 配置项我放的值是数据库驱动类的全限定名，而这项配置应该是 <code>class-name</code> 这项配置。现在回想起来，那时候确实还挺菜的。所以要感谢<strong>亮 哥</strong> 和 <strong>龚总</strong> 对当时的我的收留。</p>
<p>今年年初的时候，算起自己已经是第五个年头了(从2016年实习开始算)，反省自己的时候再想：“我会什么？是不是把一年的经验重复了这四五年呢。”</p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>非技术</tag>
      </tags>
  </entry>
  <entry>
    <title>多个三方对接实践——数据中心</title>
    <url>/2021/11/22/%E5%A4%9A%E4%B8%AA%E4%B8%89%E6%96%B9%E5%AF%B9%E6%8E%A5%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>业务发展需要对接到多个三方系统，涉及到多项业务。内部有多条业务线，每条业务线都有对应的系统支撑。每个系统都需要对接一些第三方系统，在各个业务中会有一些重合。所以我们希望：</p>
<ol>
<li>不同的业务线如果要对接相同的第三方，能够走同一个接口而不是各个业务系统对接。</li>
<li>不侵入业务系统，或者尽可能少的侵入。</li>
<li>所有第三方数据能汇聚到同一个数据库中，便于后续报表数据提取。</li>
<li>基于上面几点原因，我们决定开发一个专门的对接中心，负责对接上所有的第三方系统，内部系统只与对接中心对接。</li>
</ol>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83.png" alt="image-20211122221846176"></p>
<h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png" alt="image-20211124200958151"></p>
]]></content>
      <categories>
        <category>项目实践</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>流量回放</title>
    <url>/2021/08/23/%E6%B5%81%E9%87%8F%E5%9B%9E%E6%94%BE/</url>
    <content><![CDATA[<p>看了群里讨论的问题，也是我一直在考虑如何解决的问题，这里做个梳理和总结，希望能在梳理的基础上理清思路，统一问题难点，希望有能力，有想法的同学能够更有针对性的提出解决方案<br>首先，将流量回放进行分类，无非就是读和写两大类：<br>读流量：处理起来比较简单，录制好后直接回放即可（注意是相同环境回放，或相同数据库基础上，如果是线上录制，可以直接在灰度或预发环境回放），总结下来读流量的特点是：<br>    1. 不用担心数据没有准备好（因为录制时已经创建好了）<br>        a. 问题：如果是不同环境，或影子库，就要考虑数据准备的问题<br>    2. 也不用担心污染（只是读）<br>    3. 可以重复回放（请求是幂等的）<br>    写流量：与读流量的特点相反，读流量回放的优势，正是写流量回放的难点<br>    1. 写流量本身就可以看做是准备数据的过程<br>        a. 问题：写入新的数据后，如何通知到下游<br>    2. 要么写入失败，要么产生新的数据（脏数据，产生污染，写影子库是一种解法）<br>        a. 如创建用户，相同姓名和身份证号的，只能有一个，再次创建就会失败<br>        b. 如创建订单，每次都生成新的订单号，问题同1.a是这个新生成的订单号，如何通知下游<br>    3. 关于写接口的重复回放<br>        a. 同2.a如果是写接口是在参数相同的情况下是排他的，则不能重复回放<br>        b. 同2.b创建订单类的可以重复回放，但是一是会产生很多脏数据，二是如何通知下游</p>
<p>总结一下问题和群里讨论的解决方案：<br>    1. 读流量的数据如何准备？<br>    解1：人工介入，提前准备，回放时读取配置进行替换<br>    解2：录制时也包括写流量，回放时也回放写流量，但是要提取写流程的出参，放入环境变量或本次回放的局部变量中，供下游接口在需要时进行替换<br>    总的来说这两种解法都是一样的，就是数据偏移，个人感觉这也是柯南开源的一个亮点，提出了数据偏移的概念（当然具体实现是什么相的我还不清楚，但我个人觉得这个指明了解决问题的方向，让我们在解决这个问题上不再迷茫）<br>    2. 写流量产生的响应出参，如何通知下游进行替换？<br>    基于我个人对流量回放的思考和理解，我知道替换是必须要做的，具体怎么做，有一点思路，但是也没有实践过，希望柯南开源的大佬，能讲讲这部分是如何做到的？<br>    3. 3.1 排他性的写流量，如何做到重复回放时不失败报错？<br>    当然，这个问题的答案，最终也得回到偏移替换上，对入参进行偏移替换就可以了吗？如何做到，同问题2，希望有大佬回答下。<br>    3.2 脏数据的问题，如何避免污染？<br>    回答可能是影子库。但是从群内的讨论来看，好像意思是，在回放的时候写的流量可以写到影子库，但是读的流量，仍然可以读正式库。（请柯南的大佬确认一下，可以这么做吗？）这么做似乎没有什么问题，但是个人认为读写还是保持连贯比较高，即写在哪里，读就在哪里。<br>    另外，多说一句，有人可能会问，重复回放失败的问题，写影子库不也就解决了吗？我之所以在3.1时没提影子库，就是因为这个问题不是影子库能解决的，因为一旦在影子库回放过一次之后，影子库里也就有相同的数据了，再次回放肯定还是会报错的。<br>    这里再引申一下，其实关于重复写的问题我跟同事讨论过，他提出了一个很大胆的想法，即影子库镜像，即在流量录制前，将影子库做成镜像，每次流量回放时，将镜像库还原，这样做的话，可以做到录制流量一丝一毫修改都不需要帮，100%真实流量回放。我觉得这个想法很有创意，至于实践起来会遇到什么样的困难，大家可以思考一下，我这里就算抛转引玉了。<br>    另外，总结了这么多，一直没有提到mock，这里再追加一下写流量的另外一种解法：即采用mock，如果是用jvm-sandbox-repeater做流量回放的话，可以做到方法级别的mock，即遇到写库的操作，并不真的执行写入操作，可以mock为返回指定的数据。仔细想想，如果采用mock的话即不用写影子库，又不用考虑数据偏移，真是个好东西，对于服务端是java应用来说，是个不错的选择。（当然，通用性有一定的限制，必须是java应用，另外，对于mock针对其他数据源的支持情况还有待考证，如ES，hbase，redis等）</p>
]]></content>
      <categories>
        <category>流量回放</category>
      </categories>
      <tags>
        <tag>流量回放</tag>
      </tags>
  </entry>
  <entry>
    <title>自学ES-00之目录</title>
    <url>/2022/04/15/%E8%87%AA%E5%AD%A6ES-00%E4%B9%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p><a href="/2022/04/15/%E8%87%AA%E5%AD%A6ES-01%E4%B9%8B%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/">自学ES-01之环境安装</a> </p>
<p><a href="/2022/04/15/%E8%87%AA%E5%AD%A6ES-02%E4%B9%8B%E7%B4%A2%E5%BC%95CRUD/">自学ES-02之索引CRUD</a>  </p>
<p><a href="/2022/04/15/%E8%87%AA%E5%AD%A6ES-03%E4%B9%8B%E6%96%87%E6%A1%A3/">自学ES-03之文档</a> </p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>自学ES-01之环境安装</title>
    <url>/2022/04/15/%E8%87%AA%E5%AD%A6ES-01%E4%B9%8B%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>[toc]</p>
<p>搭建本地 Docker 的环境，仅供练习使用。</p>
<h1 id="ES-环境安装"><a href="#ES-环境安装" class="headerlink" title="ES 环境安装"></a>ES 环境安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e &quot;ES_JAVA_OPTS=-Xmx512M -Xms512M&quot; -e &quot;xpack.security.enabled=false&quot; elasticsearch:7.16.3</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e &quot;ES_JAVA_OPTS=-Xmx512M -Xms512M&quot; elasticsearch:7.16.3</span><br></pre></td></tr></table></figure>

<ul>
<li>ES_JAVA_OPTS=-Xmx512M -Xms512M: 配置 ES 的内存为 512M。</li>
<li>xpack.security.enabled:配置是因为查询的时候，在 kibana 界面会出现一个安全提示，该配置在生产中需要开启(设置为:true)。</li>
</ul>
<h1 id="Kibana-环境安装"><a href="#Kibana-环境安装" class="headerlink" title="Kibana 环境安装"></a>Kibana 环境安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name kibana --link es  -e ELASTICSEARCH_HOSTS=http://es:9200 -p 5601:5601 kibana:7.16.3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>自学ES-02之索引CRUD</title>
    <url>/2022/04/15/%E8%87%AA%E5%AD%A6ES-02%E4%B9%8B%E7%B4%A2%E5%BC%95CRUD/</url>
    <content><![CDATA[<p>[toc]</p>
<blockquote>
<p>注：下面的操作都是在 kibana 中进行的。</p>
</blockquote>
<h1 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h1><h2 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /&#123;index_name&#125;</span><br><span class="line">&#123;</span><br><span class="line">	settings: &#123;</span><br><span class="line">			...		</span><br><span class="line">	&#125;</span><br><span class="line">	mappings: &#123;</span><br><span class="line">		properties: &#123;</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引查看"><a href="#索引查看" class="headerlink" title="索引查看"></a>索引查看</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /&#123;index_name&#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引删除"><a href="#索引删除" class="headerlink" title="索引删除"></a>索引删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /&#123;index_name&#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引打开和关闭"><a href="#索引打开和关闭" class="headerlink" title="索引打开和关闭"></a>索引打开和关闭</h2><p>ES 支持对索引进行关闭操作，关闭后也可以重新打开。索引一旦关闭：</p>
<ul>
<li>不能写入数据</li>
<li>不能搜索数据</li>
</ul>
<p>kibana</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /&#123;index_name&#125;/_close</span><br></pre></td></tr></table></figure>

<p>索引关闭后，再对索引进行数据写入或搜索，将返回如下报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;index_closed_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;closed&quot;,</span><br><span class="line">        &quot;index_uuid&quot; : &quot;wnmGfLi-TPCanl-YuBNojg&quot;,</span><br><span class="line">        &quot;index&quot; : &quot;sjl&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;index_closed_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;closed&quot;,</span><br><span class="line">    &quot;index_uuid&quot; : &quot;wnmGfLi-TPCanl-YuBNojg&quot;,</span><br><span class="line">    &quot;index&quot; : &quot;sjl&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>打开索引</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /&#123;index_name&#125;/_open</span><br></pre></td></tr></table></figure>

<h2 id="索引别名"><a href="#索引别名" class="headerlink" title="索引别名"></a>索引别名</h2><p>可以对多个索引设置相同的别名，从而将这些索引通过别名进行聚合，然后再对设置别名的索引进行操作，就相当于是在同时操作这些别名匹配的索引。</p>
<h1 id="映射-mappings"><a href="#映射-mappings" class="headerlink" title="映射(mappings)"></a>映射(mappings)</h1><h2 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h2><p>映射是在创建索引时一并指定。映射可以理解为关系型数据库中的表定义。一张表有哪些字段，每个字段什么类型。</p>
<h2 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /&#123;index_name&#125;/_mapping</span><br><span class="line">#返回数据</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sjl&quot;</span> : &#123;  #索引名称</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123; #映射相关信息</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改映射"><a href="#修改映射" class="headerlink" title="修改映射"></a>修改映射</h2><p><strong>映射不能修改，只能扩展。</strong>，如果需要修改映射的字段类型的时候应该怎么办？</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 扩展映射 </span><br><span class="line">POST /sjl/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h3><p><code>keyword</code> 类型是不能再切分的字符串类型。在搜索的时候，不对 <code>keyword</code> 类型的字符串进行切分后的部分匹配。使用 <code>term</code> 查询数据。</p>
<h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p><code>text</code> 精英是可切分的字符串类型。在搜索的时候，会按照分词算法对 <code>text</code> 类型的字符串进行切分后匹配。使用 <code>match</code> 查询数据。</p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul>
<li><p>long(长整型):8字节，64位,  $-2^{63}$ —— $2^{63}$-1</p>
</li>
<li><p>integer(整型):4字节，32位，$-2^{31}$ —— $2^{31}$-1</p>
</li>
<li><p>short(短整型):2字节，16位，$-2^{15}$ —— $2^{15}$-1</p>
</li>
<li><p>byte(字节):1字符，8位，$-2^{7}$ —— $2^{7}$，即 -128——127</p>
</li>
<li><p>double(双精度):8字节，64位。</p>
</li>
<li><p>float(单精度)：4字节，32位</p>
</li>
<li><p>half_float(半精度)：2字符，16位。</p>
</li>
<li><p>scaled_float(缩放浮点型)</p>
</li>
<li><p>unsigned_long(无符号长整形)：6字节，64位。$2^{64}-1$</p>
</li>
</ul>
<h3 id="布尔-boolean"><a href="#布尔-boolean" class="headerlink" title="布尔(boolean)"></a>布尔(boolean)</h3><ul>
<li>true 或 “true”</li>
<li>false 或 “false”</li>
</ul>
<h3 id="日期类型-date"><a href="#日期类型-date" class="headerlink" title="日期类型(date)"></a>日期类型(date)</h3><p>日期类型为两种：</p>
<ul>
<li>strict_date_optional_time：严格的日期类型，yyyy-MM-dd、yyyyMMdd、yyyyMMddHHmmss、yyyy-MM-ddTHH:mm:ss、yyyy-MM-ddTHH:mm:ss.SSS和yyyy-MM-ddTHH:mm:ss.SSSZ</li>
<li>epoch_millis：时间戳类型</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>ES 定义的格式，自动支持数组。在定义时，使用数组的内容项的类型定义 mapping 即可。写入数据时，使用 <code>[]</code> 的形式。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /&#123;index_name&#125;/<span class="number">001</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tag&quot;</span>: [<span class="string">&quot;tag1&quot;</span>, <span class="string">&quot;tag2&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tag 定义的是 <code>keyword</code> 的类型。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>与普通的对象操作一致。 </p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>自学ES-03之文档</title>
    <url>/2022/04/15/%E8%87%AA%E5%AD%A6ES-03%E4%B9%8B%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="文档写入"><a href="#文档写入" class="headerlink" title="文档写入"></a>文档写入</h1><h2 id="单条写入"><a href="#单条写入" class="headerlink" title="单条写入"></a>单条写入</h2><p><code>ES</code> 中文档写入是 <code>POST</code> 请求。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /&#123;index_name&#125;/_doc/&#123;_id&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>{index_name} : 索引名称，必须有。</li>
<li>{_id} 可以没有，如果没有 <code>ES</code> 会自动生成，并在写入成功后返回。如果有，使用指定的 id。</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /sjl/_doc/<span class="number">001</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;工程师&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">响应如下：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;sjl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;002&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">7</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="批量写入"><a href="#批量写入" class="headerlink" title="批量写入"></a>批量写入</h2><p><code>ES</code> 批量写入，统一调 <code>_bulk</code> 。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POOST /_bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>: &#123;<span class="attr">&quot;_index&quot;</span>: index_name, _id:id&#125;</span><br><span class="line">&#123;<span class="attr">&quot;data&quot;</span>: xxx&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>: &#123;<span class="attr">&quot;_index&quot;</span>: index_name, _id:id&#125;</span><br><span class="line">&#123;<span class="attr">&quot;data&quot;</span>: xxx&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>index_name：索引名称</li>
<li>_id: 可以省略</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>: &#123;<span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;sjl&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;003&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>: <span class="string">&quot;工程师3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>: &#123;<span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;sjl&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>: <span class="string">&quot;工程师4&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">----- 响应信息---------</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;items&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;sjl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;003&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">8</span>,</span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;sjl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;004&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">9</span>,</span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在某些情况下，我们直接使用 curl 读取一个文件也可以完成批量的写入。原理：curl 从文件读数据，然后调 ES 批量写入接口进行数据写入。</p>
<p><strong>示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s -X POST &#x27;ES:9200/_bulk?preety&#x27; --data-binary &quot;@bulk_doc.json&quot; </span><br></pre></td></tr></table></figure>

<ul>
<li>-s: 不输出错误和进度信息</li>
<li>-X: 请求请求方式为 POST</li>
<li>–data-binary：二进制POST 的请求体</li>
<li>@bulk_doc.json：指定文件目录</li>
</ul>
<h1 id="文档修改"><a href="#文档修改" class="headerlink" title="文档修改"></a>文档修改</h1><h2 id="单条修改"><a href="#单条修改" class="headerlink" title="单条修改"></a>单条修改</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /&#123;idnex_name&#125;/_update/&#123;_id&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;修改字段名&quot;</span>: <span class="string">&quot;修改字段值”，</span></span><br><span class="line"><span class="string">    xxx: xx</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">-----查询 sjl索引下的id：<span class="number">004</span> 数据------</span><br><span class="line">GET /sjl/_doc/<span class="number">004</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;sjl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;004&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">11</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;工程师4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------- 修改数据-----------</span><br><span class="line">POST /sjl/_update/<span class="number">004</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">26</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">#这条数据原来是有一个 title: 工程师<span class="number">4</span>的数据在</span><br><span class="line">#查询一下结果</span><br><span class="line">GET /sjl/_doc/<span class="number">004</span></span><br><span class="line">---- 返回结果-----</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;sjl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;004&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">11</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;工程师4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">26</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h2><h1 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h1><h2 id="单条删除"><a href="#单条删除" class="headerlink" title="单条删除"></a>单条删除</h2><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><h1 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h1>]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~00之目录</title>
    <url>/2021/09/08/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-00%E4%B9%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="我为什么要学-React"><a href="#我为什么要学-React" class="headerlink" title="我为什么要学 React"></a>我为什么要学 React</h2><p>之前一直计划着和朋友一起开发一款基于 Netty 的推送系统，当时的计划是支持 WebSocket 的推送，很无奈我和他都是后端，这就导致 没有人做前端的工作。此时我就想着，自己能不能也学下前端，自己来开发。</p>
<p>在刚刚工作的时候，其实是前后端混合着写的。前端是 JSP + JQuery，后端是 Spring + Mybatis。那时候的前端都是 Ajax 发起请求，现在变化很快前端也开始讲究工程化了。刚入行的时候都能做前端的工作，现在不能荒废了。</p>
<p>最近和同事聊天，有一句话直击心灵。在公司写代码，写出的业务代码是公司的。即使公司业务发展得再好，个人付出了再多最后还剩什么呢。工资？那是应得的部分。技术？只有业务代码。经验？技术经验还可以用得上，如果是业务经验呢，毫无用处。什么才是自己的，我思考了很久。如果自己利用会的技术，做出的具有一定能用性的作品，这才是自己的。这时就要求个人是全栈的，光后端可不行。</p>
<p><strong>React 我来了！！！</strong></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="/2021/09/08/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-01%E4%B9%8BReact%E5%9F%BA%E7%A1%80">自学React系列-01之React基础</a></p>
<p><a href="/2021/09/09/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-02%E4%B9%8B%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%89%E5%A4%A7%E5%B1%9E%E6%80%A7">自学React系列-02之类组件三大属性</a></p>
<p><a href="/2021/09/12/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-03%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">自学React系列-03之组件的生命周期</a></p>
<p><a href="/2021/09/13/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-04%E4%B9%8BReact%E8%84%9A%E6%89%8B%E6%9E%B6">自学React系列-04之React脚手架</a></p>
<p><a href="/2021/09/16/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-05%E4%B9%8Baxios">自学React系列-05之axios</a></p>
<p><a href="2021/09/19/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-06%E4%B9%8B%E8%B7%AF%E7%94%B1">自学React系列-06之路由</a></p>
<p>… 更新中…</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~01之React基础</title>
    <url>/2021/09/08/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-01%E4%B9%8BReact%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="React的HelloWorld"><a href="#React的HelloWorld" class="headerlink" title="React的HelloWorld"></a>React的HelloWorld</h1><p>使用任何语言都先来一个 <code>HelloWorld</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">            const VDOM = &lt;h1&gt;Hello React!&lt;/h1&gt;;</span><br><span class="line">            ReactDOM.render(VDOM, document.getElementById(&quot;test&quot;));</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><ul>
<li><p>定义虚拟 DOM 的时候不要写引号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1&gt;Hello React!&lt;/h1&gt;;  #h1标签前后都没有引号</span><br></pre></td></tr></table></figure></li>
<li><p>标签中混入 JS 表达式时要用 <code>&#123;&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const arr = [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王二&#x27;];</span><br><span class="line">const VDOM = &lt;h4&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;arr.map((key, i) =&gt; &#123;</span><br><span class="line">            return &lt;li key=&#123;i&#125;&gt;&#123;key&#125;&lt;/li&gt;;  # 这里的 key 使用 &#123;&#125; 包起来的</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/h4&gt;;</span><br><span class="line">ReactDOM.render(VDOM, document.getElementById(&quot;test&quot;));</span><br></pre></td></tr></table></figure></li>
<li><p>使用样式时，类名不要用 class 而要用 className</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1 className=&#x27;title&#x27;&gt;Hello React!&lt;/h1&gt;;  #使用定义的 .title css 样式</span><br></pre></td></tr></table></figure></li>
<li><p>内联样式，使用 style 属性时要用 <code>&#123;&#123;style: value&#125;&#125;</code>，如果有样式是 <code>background-color</code> 这种的改写成坨峰形式即 <code>backgroundColor</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1 style=&#123;&#123;&#x27;backgroundColor&#x27;: &#x27;pink&#x27;, &#x27;width&#x27;: &#x27;1000px&#x27;, &#x27;height&#x27;: &#x27;100px&#x27;&#125;&#125;&gt;Hello React!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure></li>
<li><p>只有一个顶级标签(要标签)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1 className=&#x27;title&#x27;&gt;Hello React!&lt;/h1&gt;;  #不能再出现 与 &lt;h1&gt; 标签平级的标签了</span><br></pre></td></tr></table></figure></li>
<li><p>标签必须闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1&gt;; #这种形式不可以</span><br></pre></td></tr></table></figure></li>
<li><p>标签首字母小写会转为同名的 html 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const VDOM = &lt;h1&gt;Hello React&lt;/h1&gt;; #会转换成 html 的 &lt;h1&gt;&lt;/h1&gt; 标签</span><br></pre></td></tr></table></figure></li>
<li><p>标签首字母大写代表是 React 的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">  return &lt;h1&gt;这是一个函数式组件&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;, document.getElementById(&quot;test&quot;));  #&lt;Demo/&gt;标签就是 React 的组件</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h1><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>使用函数定义的 <code>React</code> 组件称为函数组件，示例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">  return &lt;h1&gt;这是一个函数式组件&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Demo&gt;&lt;/Demo&gt;, document.getElementById(&quot;FunctionComponent&quot;));</span><br></pre></td></tr></table></figure>



<h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><p>使用类定义的<code>React</code>组件称为类式组件，示例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ClassComponent extends React.Component &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return &lt;h1&gt;这是类组件&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;ClassComponent&gt;&lt;/ClassComponent&gt;, document.getElementById(&quot;ClassComponent&quot;));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~02之类组件三大属性</title>
    <url>/2021/09/09/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-02%E4%B9%8B%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%89%E5%A4%A7%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="state"><a href="#state" class="headerlink" title="state"></a>state</h1><p>每个类组件上都有 <code>state</code> 属性，<code>state</code>属性表示对应组件的状态。<code>state</code> 的使用如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person extends React.Component &#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;hide: false&#125;</span><br><span class="line">    this.modifyName = this.modifyName.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    /*</span><br><span class="line">    * 1. onClinck 不能写 onclick , React 封装过的点击事件，不是 html 的点击事件</span><br><span class="line">    * 2.不能写 modifyName() 这种形式</span><br><span class="line">    */</span><br><span class="line">    return &lt;h1 onClick=&#123;this.modifyName&#125;&gt;我的名字叫&#123;this.state.hide ? &#x27;张三&#x27;: &#x27;***&#x27;&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifyName()&#123;</span><br><span class="line">    const hide = this.state.hide;</span><br><span class="line">    this.setState(&#123;hide: !hide&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简略的写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person extends React.Component &#123;</span><br><span class="line">    this.state = &#123;hide: false&#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">      /*</span><br><span class="line">      * 1. onClinck 不写 onclick , React 封装过的点击事件，不是 html 的点击事件</span><br><span class="line">      * 2.不能写 modifyName() 这种形式</span><br><span class="line">      */</span><br><span class="line">      return &lt;h1 onClick=&#123;this.modifyName&#125;&gt;我的名字叫&#123;this.state.hide ? &#x27;张三&#x27;: &#x27;***&#x27;&#125;&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifyName = () =&gt;&#123;</span><br><span class="line">			const hidd = this.state.hide;</span><br><span class="line">      // 这里一定要调用 this.setState() 方法重新设置状态，而不能使用 this.state.hide = true 的形式。</span><br><span class="line">      this.setState(&#123;hide: !hide&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点:</p>
<ul>
<li><code>onClinck</code> 不能写 <code>onclick</code> , React 封装过的点击事件，不是 html 的点击事件。React 中的事件与 html 中的不一样。</li>
<li>注册事件时不能写 modifyName() 这种形式，不能直接调用函数。</li>
<li>一定要调用 this.setState() 方法重新设置状态，而不能使用 this.state.hide = true 的形式。</li>
</ul>
<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p><code>props</code>  用于接收组件传递的参数。</p>
<p><code>props</code> 属性是只读的。</p>
<p><code>props</code> 可以设置默认值，也可以对类型进行验证(验证不通过在控制台有警告信息)。</p>
<p><strong>通过组件参数传值</strong>，在 <code>props</code> 中接收组件传的属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">        return &lt;h2&gt;我是&#123;this.props.name&#125;&lt;/h2&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo name=&#x27;李四&#x27;&gt;&lt;/Demo&gt;, document.getElementById(&quot;props&quot;));</span><br></pre></td></tr></table></figure>



<p><strong>设置默认值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component &#123;</span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    name: &#x27;***&#x27;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    return &lt;h2&gt;我是&#123;this.props.name&#125;&lt;/h2&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo&gt;&lt;/Demo&gt;, document.getElementById(&quot;props&quot;));</span><br></pre></td></tr></table></figure>



<p><strong>类型校验</strong></p>
<p>校验需要额外引入一个库 <code>prop-types.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Demo extends React.Component &#123;</span><br><span class="line">  // 设置默认值为 ***</span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    name: &#x27;***&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  // 校验 name 的类型为 Number</span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    name: PropTypes.number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    return &lt;h2&gt;我是&#123;this.props.name&#125;&lt;/h2&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo&gt;&lt;/Demo&gt;, document.getElementById(&quot;props&quot;));</span><br></pre></td></tr></table></figure>

<p>在浏览器的控制台会有一条警告信息，不过浏览器还是会将 *** 显示出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Failed prop type: Invalid prop `name` of type `string` supplied to `Demo`, expected `number`.</span><br><span class="line">    at Demo (&lt;anonymous&gt;:15:9)</span><br></pre></td></tr></table></figure>



<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p>Ref 转发是一项将 ref 自动地通过组件传递到其一子组件的技巧。</p>
<p><strong>字符串的形式</strong></p>
<p>字符串方式是最简单的一种试，但是官方已经不推荐使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;类组件之refs&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">            class RefDemo extends React.Component &#123;</span><br><span class="line">                constructor(props)&#123;</span><br><span class="line">                    super(props);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                handleSubmit = (event) =&gt; &#123;</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                    alert(this.refs.demo.value)</span><br><span class="line">                &#125;</span><br><span class="line">                render() &#123;</span><br><span class="line">                    console.log(this);</span><br><span class="line">                    return (</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;form&gt;</span><br><span class="line">                                &lt;input ref=&#x27;demo&#x27; type=&#x27;text&#x27;/&gt;</span><br><span class="line">                                &lt;button onClick=&#123;this.handleSubmit&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ReactDOM.render(&lt;RefDemo/&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>回调函数的形式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;类组件之回调函数refs&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">            class RefDemo extends React.Component &#123;</span><br><span class="line">                handleSubmit = (event) =&gt; &#123;</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                    console.log(this);</span><br><span class="line">                    alert(this.element.value)</span><br><span class="line">                &#125;</span><br><span class="line">                render() &#123;</span><br><span class="line">                    return (</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;form&gt;</span><br><span class="line">                                &lt;input ref=&#123;node =&gt; this.element=node&#125; type=&#x27;text&#x27;/&gt;</span><br><span class="line">                                &lt;button onClick=&#123;this.handleSubmit&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ReactDOM.render(&lt;RefDemo/&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>创建Refs</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;类组件之创建refs&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">            class RefDemo extends React.Component &#123;</span><br><span class="line">                constructor(props)&#123;</span><br><span class="line">                    super(props)</span><br><span class="line">                    this.currentRef = React.createRef();</span><br><span class="line">                &#125;</span><br><span class="line">                handleSubmit = (event) =&gt; &#123;</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                    const element = this.currentRef.current;</span><br><span class="line">                    alert(this.element.value)</span><br><span class="line">                &#125;</span><br><span class="line">                render() &#123;</span><br><span class="line">                    return (</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;form&gt;</span><br><span class="line">                                &lt;input ref=&#123;node =&gt; this.element=node&#125; type=&#x27;text&#x27;/&gt;</span><br><span class="line">                                &lt;button onClick=&#123;this.handleSubmit&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ReactDOM.render(&lt;RefDemo/&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h1><p>表单数据将交由 DOM 节点来处理，非 React 处理。</p>
<h1 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h1><p>在 HTML 中，表单元素（如&lt;input&gt;、 &lt;textarea&gt; 和 &lt;select&gt;）之类的表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 setState()来更新。</p>
<p>我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~03之组件的生命周期</title>
    <url>/2021/09/12/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-03%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><p>组件的生命周期主要包含三个阶段，分别是：**挂载阶段(mount)<strong>、</strong>更新阶段(update)<strong>、</strong>卸载阶段(unmount)**。</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="image-20210913215008120"></p>
<h2 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h2><p>半截阶段主要调用的方法如下:</p>
<ul>
<li>constructor()：构造函数，类(组件)在创建时会调用该函数，作用阶段在 render 之前调用。</li>
<li>static getDerivedStateFromProps()：这个方法基本不使用。</li>
<li>render()：组件的渲染</li>
<li>componentDidMount()：组件渲染完成，组件组装到 DOM 上之后调用该函数，作用阶段在 render 之后调用。</li>
</ul>
<h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><ul>
<li>static getDerivedStateFromProps()：这个方法基本不使用。</li>
<li>shouldComponentUpdate()：返回一个布尔值，返回结果决定是否继续渲染组件。</li>
<li>render() ：与挂载阶段一，渲染组件。一般在调用  <code>setState()</code> 函数时会触发界面的重新渲染。</li>
<li>getSnapshotBeforeUpdate()：在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置），该函数用得极少。</li>
<li>componentDiaUpdate()：当组件更新后调用该函数。<strong>注意:首次渲染不会调用该函数。</strong></li>
</ul>
<h2 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h2><ul>
<li>componentWillUnmount()：在组件卸载之前调用。在该函数中不要调用 <code>setState()</code> 这类会触发组件渲染的方法，因为该组件永远不会再渲染了。</li>
</ul>
<p>对于有编程基础的人来说，生命周期理解起来很简单。在某个特殊阶段做点特殊的事情，我们就需要生命周期。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~04之React脚手架</title>
    <url>/2021/09/13/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-04%E4%B9%8BReact%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="React脚手架安装"><a href="#React脚手架安装" class="headerlink" title="React脚手架安装"></a>React脚手架安装</h1><p>全局安装 create-react-app 包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sjl@sjldeMacBook-Pro ~ npm install -g create-react-app</span><br></pre></td></tr></table></figure>

<p>切换到要创建前端工程的目录，使用 <code>create-react-app</code> 命令创建 react-test 工程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /Users/sjl/work/other/react #进入目录</span><br><span class="line">create-react-app react-test  # 使用 create-react-app 创建工程，工程名称为: react-test</span><br></pre></td></tr></table></figure>



<h1 id="React脚手架目录结构"><a href="#React脚手架目录结构" class="headerlink" title="React脚手架目录结构"></a>React脚手架目录结构</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/react%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="image-20210918234944474"></p>
<h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><p>存放一些安装的依赖包</p>
<h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>存放一些静态资源</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>源码文件夹，在很多其他语言的脚手架里也有这种名称。比如 Java 的 Maven 也有 src 目录。</p>
<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>git 的忽略配置(非必须)，可以删除。</p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>node的包文件、项目的结束</p>
<h2 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h2><p>一般写一些简介，仅阅读用</p>
<h2 id="yarn-lock"><a href="#yarn-lock" class="headerlink" title="yarn.lock"></a>yarn.lock</h2><p>项目依赖的安装包</p>
<h1 id="运行脚手架"><a href="#运行脚手架" class="headerlink" title="运行脚手架"></a>运行脚手架</h1><p>在终端窗口进入工程所在的目录，执行下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<p>终端输出</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/react%E8%84%9A%E6%89%8B%E6%9E%B6%E5%90%AF%E5%8A%A8.png" alt="image-20210919000239191"></p>
<p>页面展示</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/react%E8%84%9A%E6%89%8B%E6%9E%B6%E5%90%AF%E5%8A%A8%E9%A1%B5.png" alt="image-20210919000318892"></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~05之axios</title>
    <url>/2021/09/16/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-05%E4%B9%8Baxios/</url>
    <content><![CDATA[<h1 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h1><p>axios 是一个 <code>JavaSctipt</code> 的 http 客户端请求工具，同时也支持 <code>Node.js</code> 。<code>axios</code> 有以下特性：</p>
<ul>
<li>向浏览器发送异步请求(ajax请求)。</li>
<li>支持 <code>Promise</code> API。</li>
<li>可以对请求(request) 和 响应(response)进行拦截。</li>
<li>可以将请求数据(request data) 和响应数据(response data)进行转换。</li>
<li>支持取消请求。</li>
<li>自动转换为 <code>JSON</code> 数据。</li>
<li>支持多种浏览器：Chrome、FireFox、Safari、MicroSoft Edge、<del>IE11(基本没人使用)</del></li>
</ul>
<h1 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://localhost:8080/test/test&#x27;</span>;</span><br><span class="line">axios.get(url)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理成功情况</span></span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理错误情况</span></span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 总是会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://localhost:8080/test/test&#x27;</span>;</span><br><span class="line">axios.post(url, &#123;</span><br><span class="line">  <span class="comment">// 这里是参数</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理成功情况</span></span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理错误情况</span></span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 总是会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>看起来只是简单的将 <code>get</code> 替换成 <code>post</code> 即可。</p>
<h1 id="axios支持的请求方式"><a href="#axios支持的请求方式" class="headerlink" title="axios支持的请求方式"></a>axios支持的请求方式</h1><ul>
<li><p>axios.request(config)</p>
</li>
<li><p>axios.get(url[, config])</p>
</li>
<li><p>axios.post(url[, data[, config]])</p>
</li>
<li><p>axios.delete(url[, config])</p>
</li>
<li><p>axios.head(url[, config])</p>
</li>
<li><p>axios.options(url[, config])</p>
</li>
<li><p>axios.put(url[, data[, config]])</p>
</li>
<li><p>axios.patch(url[, data[, config]])</p>
</li>
</ul>
<h1 id="创建axios实例"><a href="#创建axios实例" class="headerlink" title="创建axios实例"></a>创建axios实例</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="支持的配置参数"><a href="#支持的配置参数" class="headerlink" title="支持的配置参数"></a>支持的配置参数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值，还可以写 psot，put，delete 等</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用与 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是从后端取响应数据应该是 <code>response.data</code> 里面的内容。</p>
<h1 id="设置全局参数"><a href="#设置全局参数" class="headerlink" title="设置全局参数"></a>设置全局参数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"><span class="comment">// xxx</span></span><br></pre></td></tr></table></figure>

<p>使用 axios.defaults.xxx 进行设置即可。</p>
<p>配置将会按优先级进行合并。它的顺序是：在 <a href="https://github.com/axios/axios/blob/master/lib/defaults.js#L28">lib/defaults.js</a> 中找到的库默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后面的优先级要高于前面的。</p>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>拦截器分为 <code>请求拦截器</code> 和 <code>响应拦截器</code> 两类，分别对请求和响应进行拦截。</p>
<h2 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>



<h2 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>



<h2 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里定义拦截器</span></span><br><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line"><span class="comment">// 这里将上面的拦截器移除</span></span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>



<h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure>

<p>以上是 <code>axios</code> 的一些基本使用。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Ajax</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~06之路由</title>
    <url>/2021/09/19/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-06%E4%B9%8B%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h1 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h1><p><code>React</code> 中的路由可以理解为：根据浏览器中的 <code>URL</code> 匹配对应的资源。需要用到路由最常见的场景就是导航，根据不同的 <code>url</code> 展示不同的页面。</p>
<p>在 <code>React</code> 中，路由需要使用到两个组件 <code>Router</code> 和 <code>Route</code> ，其中一个 <code>Route</code>  包含多个 <code>Router</code> 组件 。结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=&quot;/&quot; component=&#123;APP&#125;/&gt;</span><br><span class="line">  &lt;Route path=&quot;/index&quot; component=&#123;Index&#125; /&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>path: 指定匹配的路径。<br>component: 指定渲染的组件。<br>安装组件: npm install react-router-dom </p>
</blockquote>
<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><h2 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h2><p>BrowserRotuer ：从 url 地址栏中观察，是 url 会改着一起变化的。例如：</p>
<p><a href="https://shijieling.top/page/1">https://shijieling.top/page/1</a> -&gt; <a href="https://shijieling.top/page/2">https://shijieling.top/page/2</a> 参数变化会在域名后面的 url 变化。</p>
<h2 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h2><p>HashRouter: url 地址栏中观察 ，前面的域名部分不会发生变化，而在在后面添加一个 <code>#</code> 号，然后再是路径信息</p>
<p><a href="https://shijieling.top/#/page/1">https://shijieling.top/#/page/1</a>  -&gt; <a href="https://shijieling.top/#/page/2">https://shijieling.top/#/page/2</a></p>
<h1 id="Link和NavLink"><a href="#Link和NavLink" class="headerlink" title="Link和NavLink"></a>Link和NavLink</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><h2 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h2>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自学React系列~07之Redux</title>
    <url>/2021/09/30/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-07%E4%B9%8BRedux/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>自学React系列-08之TypeScript</title>
    <url>/2021/10/12/%E8%87%AA%E5%AD%A6React%E7%B3%BB%E5%88%97-08%E4%B9%8BTypeScript/</url>
    <content><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>symbol</li>
<li>object：对象类型</li>
<li>any：可以表示任何类型，与 Java 中的 Object 类型一个含义</li>
</ul>
<h1 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h1><ul>
<li>定义 string，单引号 <code>&#39;&#39;</code> 或者双引号 <code>&quot;&quot;</code>  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 定义 string 类型的变量 a</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>let 和 const 都可以定义变量，区别在于 let 和 const 定义的变量作用域不同。 const 是全局，let 是局部。</p>
</blockquote>
<ul>
<li><p>定义模板字符串</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> = <span class="string">`good <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>定义 number</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">1.1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>定义数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>类型断言</strong></p>
<p>向 <code>let num: number = 1.1;</code> 中的 <code>: number</code> 不是必须的， <code>ts</code> 会根据赋值的类型自动推断出变量的类型，也可以用下面的写法:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1.1</span>;</span><br></pre></td></tr></table></figure>



<h1 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h1><p>使用中括号定义数组 <code>[]</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>泛型数组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>





<h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><h2 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h2><p>参数数量确定，参数类型确定，返回值确定。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>函数有多个参数，但是其中的某一个或某几个参数可以不传值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a: <span class="built_in">string</span>, b?: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的 <code>b</code> 可以不不传值</p>
<h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>函数参数为其设置默认值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span> = <span class="string">&#x27;b&#x27;</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  retunr a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例中，如果调用  <code>foo</code> 函数，且不对参数 <code>b</code> 传值的话，<code>b</code>  的默认值就是字符串b。</p>
<h2 id="参数多类型"><a href="#参数多类型" class="headerlink" title="参数多类型"></a>参数多类型</h2><p>函数参数类型不固定，但是只能是其中的一种或几种类型，比如参数 b 只能是 number 或者 string 两种类型中的一种，但具体是哪一种不确定。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a: <span class="built_in">string</span>|<span class="built_in">number</span></span>): <span class="title">string</span>|<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Interface-接口"><a href="#Interface-接口" class="headerlink" title="Interface(接口)"></a>Interface(接口)</h1><p>接口可以定义对象的描述</p>
<p>接口可以定义一些抽象方法</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类实现接口</p>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~00之目录</title>
    <url>/2021/08/24/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-00%E4%B9%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>2024-01-31 10:25:35，准备重启 K8s 相关博客写作。后面的内容：</p>
<ul>
<li>K8s 架构</li>
<li>K8s 网络原理</li>
<li>K8s 的调试</li>
</ul>
<p> <a href="/2021/08/24/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-01%E4%B9%8Bk8s%E6%98%AF%E4%BB%80%E4%B9%88/">自学k8s系列-01之k8s是什么</a></p>
<p> <a href="/2021/08/24/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-02%E4%B9%8Bk8s%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5/">自学k8s系列-02之k8s主要概念</a> </p>
<p> <a href="/2021/08/26/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-03%E4%B9%8BYAML/">自学k8s系列-03之YAML</a> </p>
<p> <a href="/2021/08/28/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-04%E4%B9%8BPod/">自学k8s系列-04之Pod</a> </p>
<p> <a href="/2021/09/01/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-05%E4%B9%8BService/">自学k8s系列-05之Service</a> </p>
<p><a href="/2021/09/04/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-06%E4%B9%8B%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0/">自学k8s系列~06之滚动更新</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~01之k8s是什么</title>
    <url>/2021/08/24/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-01%E4%B9%8Bk8s%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="k8s-的logo"><a href="#k8s-的logo" class="headerlink" title="k8s 的logo"></a>k8s 的logo</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/k8s_logo.svg" alt="Kubernetes_Logo"></p>
<h1 id="k8s-是什么"><a href="#k8s-是什么" class="headerlink" title="k8s 是什么?"></a>k8s 是什么?</h1><p>k8s 是 kubernetes 的简称， k和s之间有 8 个字母，老外的缩写就是这样。</p>
<ul>
<li>首先，它是一个全新的基于容器技术的分布式架构领先方案。</li>
<li>提供众多底层模块和功能。</li>
<li>Kubernetes是一个开放的开发平台。</li>
<li>屏蔽了底层</li>
</ul>
<p>k8s 是当前最火的一门技术，而且很多大厂都在使用。值得学习</p>
<p>后面再补</p>
<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul>
<li><strong>《每天5分钟玩转Kubernetes》</strong></li>
<li>《基于Kubernetes的容器云平台实战》</li>
<li>《Kubernetes进阶实战》</li>
<li>《Kubernetes权威指南：从Docker到Kubernetes实践全接触（第4版）》</li>
<li>《容器云运维实战：Docker与Kubernetes集群》</li>
<li>《精通Kubernetes》</li>
<li><a href="https://github.com/caicloud/kube-ladder#%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84">caicloud/kube-ladder: Learning Kubernetes, The Chinese Taoist Way (github.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~02之k8s主要概念</title>
    <url>/2021/08/24/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-02%E4%B9%8Bk8s%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/k8s_logo.svg" alt="Kubernetes_Logo"></p>
<h1 id="k8s主要概念"><a href="#k8s主要概念" class="headerlink" title="k8s主要概念"></a>k8s主要概念</h1><h2 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h2><ul>
<li>集群。各种资源的集合。</li>
</ul>
<h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><ul>
<li><code>Master</code> 是 <code>Cluster</code> 的大脑，主要负责调度，决定应用在哪里运行。</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li>运行容器的载体，由 <code>Master</code> 管理。<code>Node</code> 管理容器的生命周期。</li>
</ul>
<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><ul>
<li>是 k8s 的最小单元，<code>pod</code> 可以包含一个或者多个容器。</li>
<li><code>pod</code> 会被 <code>Master</code> 调度到某一个 node 上运行。</li>
</ul>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ul>
<li>k8s 通过 <code>Controller</code> 来管理 pod。<code>Controller</code> 有以下分类：</li>
</ul>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><ul>
<li>最常用的 <code>Controller</code> 用于部署。</li>
</ul>
<h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><ul>
<li>使用 <code>Deloyment</code> 时会自动创建 <code>ReplicaSet</code> ，创建多个 <code>Pod</code> 副 本，实际上是通过 <code>ReplicaSet</code> 来实现的。通常情况下，我们不需要直接使用 <code>ReplicaSet</code> 。</li>
</ul>
<h3 id="DeamonSet"><a href="#DeamonSet" class="headerlink" title="DeamonSet"></a>DeamonSet</h3><ul>
<li>用于每个 <code>Node</code> 最多只运行一个 <code>Pod</code> 的场景。通常用于运行 <code>Demon</code>  。</li>
</ul>
<h3 id="StatefuleSet"><a href="#StatefuleSet" class="headerlink" title="StatefuleSet"></a>StatefuleSet</h3><ul>
<li>能够保证每个 <code>Pod</code> 在生命周期内名称是不变的，其他 <code>Controller</code> 不能提供该功能。</li>
<li>当发生故障需要删除 <code>Pod</code> 并重启时，<code>Pod</code> 的名称会发生变化，同时 <code>SttatefuleSet</code> 能保证副本按照固定的顺序启动、更新或者删除。</li>
</ul>
<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><ul>
<li>用于运行结束就删除的 <code>Pod</code> ，而其他 <code>Controller</code> 创建的 <code>Pod</code> 会一直运行。</li>
</ul>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><ul>
<li>访问容器的入口，对外提供自己的 ip 和 端口。</li>
<li>为 <code>Pod</code> 提供了负载均衡。</li>
<li>服务发现。集群中其他服务可以通过 Service 名字访问后端服务（DNS），也可以通过环境变量访问。</li>
</ul>
<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><ul>
<li>将一个 <code>Cluster</code> 进行逻辑上的划分。</li>
<li>不同的 <code>Namespace</code> 资源是完全隔离的。</li>
<li>系统默认会创建两个 <code>Namespace</code> :<code>default</code>  和 <code>kube-system</code> 。</li>
</ul>
<h1 id="操作k8s资源"><a href="#操作k8s资源" class="headerlink" title="操作k8s资源"></a>操作k8s资源</h1><h2 id="安装-k8s"><a href="#安装-k8s" class="headerlink" title="安装 k8s"></a>安装 k8s</h2><p><a href="https://minikube.sigs.k8s.io/docs/start/">minikube 安装教程</a></p>
<p><a href="https://kubernetes.io/docs/setup/">k8s官方安装教程</a></p>
<h2 id="启动-k8s"><a href="#启动-k8s" class="headerlink" title="启动 k8s"></a>启动 k8s</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sjl@sjldeMacBook-Pro  ~  minikube start</span><br></pre></td></tr></table></figure>

<ul>
<li>启动之前必须先安装 <code>Docker</code> 并启动，否则无法成功启动。</li>
</ul>
<h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl [flags] [options]</span><br></pre></td></tr></table></figure>

<p>flags 主要包含以下操作:</p>
<ul>
<li>create</li>
<li>get</li>
<li>edit</li>
<li>delete</li>
<li>run</li>
<li>describe</li>
<li>exec</li>
<li>apply</li>
</ul>
<h2 id="Namespace-1"><a href="#Namespace-1" class="headerlink" title="Namespace"></a>Namespace</h2><h3 id="创建-Namespace"><a href="#创建-Namespace" class="headerlink" title="创建 Namespace"></a>创建 Namespace</h3><ul>
<li>命令方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create namespace sjl</span><br></pre></td></tr></table></figure>

<ul>
<li>yaml 方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sjl-yaml</span></span><br></pre></td></tr></table></figure>

<p>将上面的这一段脚本保存为 <code>ns_create.yaml</code> ，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./ns_create.yaml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>namespace 可以简写为 ns。namespace 名称校验规则: [a-z0-9]([-a-z0-9]*[a-z0-9])? ，只能使用小写字母中横线和数字，且只能以小写字母开头。</p>
</blockquote>
<h3 id="删除-Namespace"><a href="#删除-Namespace" class="headerlink" title="删除 Namespace"></a>删除 Namespace</h3><ul>
<li>命令方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete namespace sjl</span><br></pre></td></tr></table></figure>

<ul>
<li>yaml 方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">-f</span> <span class="string">./ns_create.yaml</span></span><br></pre></td></tr></table></figure>

<h3 id="查看所有-Namespace"><a href="#查看所有-Namespace" class="headerlink" title="查看所有 Namespace"></a>查看所有 Namespace</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get namespace</span><br></pre></td></tr></table></figure>

<h2 id="Pod-amp-Deployment"><a href="#Pod-amp-Deployment" class="headerlink" title="Pod&amp;Deployment"></a>Pod&amp;Deployment</h2><h3 id="创建-Deployment"><a href="#创建-Deployment" class="headerlink" title="创建 Deployment"></a>创建 Deployment</h3><ul>
<li>命令方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create deployment nginx-deployment --image=nginx:1.7.9 --replicas=2 -n sjl</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 deployment ，指定名称为 nginx-deployment 镜像为: nginx:1.7.9 副本为 2 个， namespace 为 sjl</p>
</blockquote>
<ul>
<li>yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sjl</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./deployment_crate.yaml</span><br></pre></td></tr></table></figure>

<p>创建了 <code>Deployment</code> 就会创建对应的 <code>Pod</code> 。查看 <code>Pod</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n sjl</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~03之YAML</title>
    <url>/2021/08/26/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-03%E4%B9%8BYAML/</url>
    <content><![CDATA[<h1 id="YAML是什么"><a href="#YAML是什么" class="headerlink" title="YAML是什么"></a>YAML是什么</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li><p>大小写敏感。</p>
</li>
<li><p>使用缩进来表示层级关系。</p>
</li>
<li><p>使用空格而不是 tab。</p>
</li>
<li><p>缩进的空格数要对齐，相同层级要对齐。</p>
</li>
<li><p># 表示注释。对比 JSON 无法写注释这一点，强太多。</p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>对象</li>
<li>数组</li>
<li>纯量</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li>键值对的集合，即 Map</li>
</ul>
<p>对象的一组键值对表示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value3</span></span><br></pre></td></tr></table></figure>

<p>每个 value 和横杠(-) 之间有一个空格。</p>
<h3 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h3><ul>
<li>单个，不可以再分的值</li>
</ul>
<p>纯量包含以下值:</p>
<ul>
<li>字符串</li>
<li>布尔值</li>
<li>数值</li>
<li>Null</li>
<li>时间</li>
<li>日期</li>
</ul>
<h4 id="字符串表示"><a href="#字符串表示" class="headerlink" title="字符串表示"></a>字符串表示</h4><ul>
<li>简单字符串示例</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">sjl</span> <span class="comment">#最简单的字符串示例</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特殊符号字符串</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;sjl sjl&#x27;</span> <span class="comment">#包含空格等特殊字符，需要放在引号中</span></span><br></pre></td></tr></table></figure>

<ul>
<li>单引号和双引号</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;sjl \n sjl&#x27;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;sjl \n sjl&quot;</span></span><br></pre></td></tr></table></figure>

<p>单引号会对特殊字符 进行转义。上面示例中的 <code>\n</code> 会转义为 <code>\\n</code> 在展示的时候，还是字符串。双引号不会对特殊字符转义，上面示例中的 <code>\n</code> 不会转义，字符串的表示还是为 <code>\n</code> ，这样在某些编程语言中会视作换行符。</p>
<ul>
<li>单引号转义</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;sjl&#x27;</span><span class="string">&#x27;s&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面示例中的 <code>&#39; </code> 单引号是字符串的一部分，需要再添加一个单引号将其转义。与 <code>Java</code> 中的 <code>\</code> 转义符含义类似。</p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值用 <code>true</code> 和 <code>false</code> 来表示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">number:</span> <span class="number">111</span></span><br></pre></td></tr></table></figure>

<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p><code>null</code> 使用 <code>~</code> 来表示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span> <span class="string">~</span></span><br></pre></td></tr></table></figure>

<h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p>日期采用  ISO 8601 表示法，一般为 <code>yyyy-MM-dd</code> 的格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date:</span> <span class="number">2021-08-26</span></span><br></pre></td></tr></table></figure>

<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>日期和时间之间，使用 <code>T</code> 进行分隔</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datetime:</span> <span class="number">2021-08-26T22:03:44</span></span><br></pre></td></tr></table></figure>

<h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>



<h1 id="k8s配置内容"><a href="#k8s配置内容" class="headerlink" title="k8s配置内容"></a>k8s配置内容</h1><p>k8s 配置 <code>yaml</code> 文件主要包含以下五块内容:</p>
<ul>
<li>apiVersion: 当前配置格式的版本</li>
<li>kind: 要创建资源的类型， <code>Deployment</code> 、<code>Pod</code> 、<code>Service</code> 、<code>Namespace</code> 、<code>ReplicaSet</code> 、<code>DeanmonSet</code>、 <code>Job</code> 、<code>CronJob</code> 等</li>
<li>metadata: 元数据, <code>name</code> 是必选项。</li>
<li>spec: 是对应 <code>kind</code> 类型的说明。</li>
<li>status: 是资源当前的状态，kubernetes 会尽最大努力使 spec 和 status 相匹配。</li>
</ul>
<h2 id="YAML-如何加载"><a href="#YAML-如何加载" class="headerlink" title="YAML 如何加载"></a>YAML 如何加载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f yaml_file_path</span><br></pre></td></tr></table></figure>

<p>部署 <code>nginx</code> 的 <code>YAML</code> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.19.7</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>kubectl apply -f deployment.yaml</code> 创建 <code>Deployment</code> 。</p>
<h2 id="部署-YAML"><a href="#部署-YAML" class="headerlink" title="部署 YAML"></a>部署 YAML</h2><ul>
<li>准备 YAML 文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sjl</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.19.7</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>部署到 <code>k8s</code> 中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./deployment.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li>用 curl 发起 http 请求</li>
</ul>
<p>主要步骤：1. 查看部署的 <code>pod</code>  的 IP 地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看部署的 pod 的 IP 地址</span></span><br><span class="line">kubectl get pods -n sjl -o wide</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是输出结果</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-deployment-59f854fb7c-vlkhj   1/1     Running   0          12m   172.17.0.5   minikube   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p> 可以看到 IP 是 172.17.0.5，进入 <code>minikube</code> 的 ssh 中，然后使用 curl 发起 http 请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进行 minikube 的 ssh 中</span></span><br><span class="line">minikube ssh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 curl 发起请求</span></span><br><span class="line">curl 172.17.0.5</span><br></pre></td></tr></table></figure>

<p>在查看 <code>pod</code> 的 log 是否有记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs nginx-deployment-59f854fb7c-vlkhj -n sjl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是打印的日志</span></span><br><span class="line">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class="line">/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class="line">10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class="line">10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class="line">/docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class="line">172.17.0.1 - - [27/Aug/2021:16:16:39 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.68.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>

<p>可以在最后一行看到，发起了 http 请求。</p>
]]></content>
      <categories>
        <category>k8s</category>
        <category>yaml</category>
      </categories>
      <tags>
        <tag>yaml</tag>
        <tag>yml</tag>
        <tag>k8s配置</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~04之Pod</title>
    <url>/2021/08/28/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-04%E4%B9%8BPod/</url>
    <content><![CDATA[<h1 id="Pod是什么"><a href="#Pod是什么" class="headerlink" title="Pod是什么"></a>Pod是什么</h1><ul>
<li><code>Pod</code> 是 <code>K8s</code> 的最小运行单元。</li>
<li>是所有应用的载体，包含一个或多个容器(这里的容器可以不是 Docker)。</li>
</ul>
<h1 id="Pod-定义"><a href="#Pod-定义" class="headerlink" title="Pod 定义"></a>Pod 定义</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>              <span class="string">//需要</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>                    <span class="string">//需要</span></span><br><span class="line"><span class="attr">metadata:</span>                    <span class="string">//需要</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>           <span class="string">//需要</span></span><br><span class="line">  <span class="attr">namaspace:</span> <span class="string">string</span>      <span class="string">//需要</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>                      <span class="string">//需要</span></span><br><span class="line">  <span class="attr">containers:</span>             <span class="string">//需要</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>         <span class="string">//需要</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">string</span>    <span class="string">//需要</span></span><br><span class="line">  <span class="attr">imagePullPolice:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">IfNotPresent</span>]</span><br><span class="line">  <span class="attr">command:</span> [<span class="string">string</span>]</span><br><span class="line">  <span class="attr">args:</span> [<span class="string">string</span>]</span><br><span class="line">  <span class="attr">workingDir:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="string">boolean</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="string">int</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="string">int</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">livenessProbe:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">string</span>]</span><br><span class="line">    <span class="attr">httpGet:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">int</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">httpHeaders:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">tcpSocket:</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">int</span></span><br><span class="line">    <span class="attr">initialDelaySeconds:</span> <span class="string">number</span></span><br><span class="line">    <span class="attr">timeoutSeconds:</span> <span class="string">number</span></span><br><span class="line">    <span class="attr">periodSeconds:</span> <span class="string">number</span></span><br><span class="line">    <span class="attr">successThreshold:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">failureThreshold:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">securityContext:</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">RestartPolicy:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">OnFailure</span>]</span><br><span class="line"><span class="attr">nodeSelector:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">imagePullSecrets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">hostNetwork:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>



<h1 id="Pod-的基本操作"><a href="#Pod-的基本操作" class="headerlink" title="Pod 的基本操作"></a>Pod 的基本操作</h1><p>Pod 等于 Docker 吗？答案是不等于。Docker 运行在 <code>Pod</code> 中，但是 <code>Pod</code> 可以运行的不仅仅是 Docker, 其他容器也可以。比如:  <code>RKT</code> 或者 <code>Podman</code> 都可以在 <code>Pod</code> 中运行。其次，<code>Pod</code> 中的容器也可以有多少。这一点类似于 Docker 中的容器互联。</p>
<h2 id="Pod-创建"><a href="#Pod-创建" class="headerlink" title="Pod 创建"></a>Pod 创建</h2><p><code>Pod</code> 的主程序需要一直处于前台运行的状态，否则 <code>Pod</code> 就会将期销毁，这一点跟 <code>Docker</code> 很像。例如: 执行的是 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup ./start.sh &amp;</span><br></pre></td></tr></table></figure>

<p><code>Pod</code> 在执行完该命令后，就会将 <code>Pod</code> 销毁。而我们的目的是期望能够后台运行，这就违背了我们的目的。正确做法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure>

<p>这样该应用就会一直前台运行， <code>Pod</code> 就会一直存在。</p>
<ul>
<li>命令方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 Pod 指定 namespace 名称为 sjl</span></span><br><span class="line">kubectl create pod podName -n sjl</span><br></pre></td></tr></table></figure>

<ul>
<li>yaml 方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">podName</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sjl</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx:1.19.7</span></span><br></pre></td></tr></table></figure>

<h2 id="Pod-状态查看"><a href="#Pod-状态查看" class="headerlink" title="Pod 状态查看"></a>Pod 状态查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的 pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定 name 的 pod</span></span><br><span class="line">kubectl get pod podName</span><br></pre></td></tr></table></figure>

<h2 id="Pod-更新"><a href="#Pod-更新" class="headerlink" title="Pod 更新"></a>Pod 更新</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl replace pod</span><br></pre></td></tr></table></figure>

<h2 id="Pod-删除"><a href="#Pod-删除" class="headerlink" title="Pod 删除"></a>Pod 删除</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete pod podName</span><br></pre></td></tr></table></figure>

<h2 id="查看Pod解析"><a href="#查看Pod解析" class="headerlink" title="查看Pod解析"></a>查看Pod解析</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看指定 name 的 pod</span></span><br><span class="line">kubectl get pod podName</span><br></pre></td></tr></table></figure>

<p><code>Pod</code> 显示的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-59f854fb7c-vlkhj   1/1     Running   1          2d23h</span><br></pre></td></tr></table></figure>

<h3 id="NAME"><a href="#NAME" class="headerlink" title="NAME"></a>NAME</h3><p><code>POD</code> 的名称。</p>
<h3 id="READY"><a href="#READY" class="headerlink" title="READY"></a>READY</h3><p>显示 <code>Pod</code> 的容器信息，以 <code>/</code> 分隔成左右两边，左边是就绪的容器，右边是 <code>Pod</code> 包含的总容器。一般是一个 <code>Pod</code> 一个容器，但是也是例外的情况，一个 <code>Pod</code> 包含多个容器。</p>
<h3 id="STATUS"><a href="#STATUS" class="headerlink" title="STATUS"></a>STATUS</h3><p>当前 <code>Pod</code> 的状态。</p>
<h3 id="RESTARTS"><a href="#RESTARTS" class="headerlink" title="RESTARTS"></a>RESTARTS</h3><p><code>Pod</code> 的重启次数。</p>
<h3 id="AGE"><a href="#AGE" class="headerlink" title="AGE"></a>AGE</h3><p><code>Pod</code> 的运行时间。</p>
<h1 id="Pod与容器"><a href="#Pod与容器" class="headerlink" title="Pod与容器"></a>Pod与容器</h1><p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/Pod%E4%B8%8E%E5%AE%B9%E5%99%A8.jpg" alt="Pod与容器"></p>
<p>在 k8s 中， <code>Pod</code> 是最小的单元体。 <code>Pod</code> 中可以运行一个或多个容器，这个容器可以是 <code>Docker</code> 也可以是其他容器。当然，我们最常用的还是 <code>Docker</code> 容器。</p>
<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><p><code>Pod</code> 被高度到某一台 <code>Node</code> 后，会下载对应的镜像，镜像版本等信息由 <code>image</code> 指定，具体的镜像下载策略</p>
<p>k8s 中的镜像下载策略由 <code>imagePullPolice</code> 指定，下载策略包含以下三种:   </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imagePullPolice:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">IfNotPresent</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Always"><a href="#Always" class="headerlink" title="Always"></a>Always</h2><p>每次都下载最新镜像。</p>
<h2 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p>只使用本地镜像，不下载。</p>
<h2 id="IfNotPresent"><a href="#IfNotPresent" class="headerlink" title="IfNotPresent"></a>IfNotPresent</h2><p>当本地没有时，才下载新镜像。</p>
<h1 id="Pod共享Volume"><a href="#Pod共享Volume" class="headerlink" title="Pod共享Volume"></a>Pod共享Volume</h1><p>部署 <code>Pod</code> yaml 配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:9.0.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app-logs</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /logs/catalina*.log&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app-logs</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/logs</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app-logs</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//todo 实验未成功， pod 没有正常启动。</span><br></pre></td></tr></table></figure>



<h1 id="Pod的配置管理"><a href="#Pod的配置管理" class="headerlink" title="Pod的配置管理"></a>Pod的配置管理</h1><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p>kubernetes 提供了一种统一的配置管理方案——<code>ConfigMap</code> 。</p>
<p><code>ConfigMap</code> 的常用方式:</p>
<ul>
<li> 生成为容器内的环境变量。</li>
<li>设置容器的启动命令启动参数（需要设置为环境变量）。</li>
<li>以 <code>Volume</code> 的形式挂载为容器内的文件或目录。</li>
</ul>
<h2 id="ConfigMap的保存形式"><a href="#ConfigMap的保存形式" class="headerlink" title="ConfigMap的保存形式"></a>ConfigMap的保存形式</h2><ul>
<li>key: value</li>
<li>vlue 可以是一个完整的配置文件</li>
</ul>
<h2 id="ConfigMap的创建"><a href="#ConfigMap的创建" class="headerlink" title="ConfigMap的创建"></a>ConfigMap的创建</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./pod_configmap.yaml</span><br></pre></td></tr></table></figure>

<h2 id="查看ConfigMap"><a href="#查看ConfigMap" class="headerlink" title="查看ConfigMap"></a>查看ConfigMap</h2><ul>
<li>查看 <code>ConfigMap</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get configmap</span><br></pre></td></tr></table></figure>

<p>展示内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME               DATA   AGE</span><br><span class="line">kube-root-ca.crt   1      175d</span><br><span class="line">pod-configmap      1      7m54s</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 <code>ConfigMap</code> 详情信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl describe configmap pod-configmap</span><br></pre></td></tr></table></figure>

<p>展示内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name:         pod-configmap</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">key:</span><br><span class="line">----</span><br><span class="line">张三</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在Pod中使用ConfigMap"><a href="#在Pod中使用ConfigMap" class="headerlink" title="在Pod中使用ConfigMap"></a>在Pod中使用ConfigMap</h2><ul>
<li>ConfigMap </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-appvars</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">apploglevel:</span> <span class="string">INFO</span></span><br><span class="line">  <span class="attr">appdatadir:</span> <span class="string">/var/data</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Pod</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap-apply</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-configmap-apply</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env|grep APP&quot;</span>] <span class="comment">#启动时执行该命令</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">APPLOGLEVEL</span> <span class="comment">#定义环境变量的名称</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-appvars</span>  <span class="comment">#环境变量的值取自 cm-appvars</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">apploglevel</span>  <span class="comment">#取的 key 为 apploglevel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">APPDATADIR</span>      <span class="comment">#定义 APPDATADIR 环境变量</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-appvars</span>   <span class="comment">#环境变量的值取自 cm-appvars</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">appdatadir</span>     <span class="comment">#取的 key 为 appdatadir</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建 ConfigMap 和 Pod</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 ConfigMap</span></span><br><span class="line">kubectl apply -f ./pod_configmap.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 Pod</span></span><br><span class="line">kubectl apply -f ./pod_configmap_apply.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li>查看日志</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 Pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME                  READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod-configmap-apply   0/1     Completed   0          7m32s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Pod 名为 pod-configmap-apply 的日志</span></span><br><span class="line">kubectl logs pod-configmap-apply</span><br><span class="line"></span><br><span class="line">APPDATADIR=/var/data</span><br><span class="line">APPLOGLEVEL=INFO</span><br></pre></td></tr></table></figure>



<p>使用 envFrom 创建环境变量</p>
<ul>
<li>使用 envFrom 创建 Pod</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap-apply-envfrom</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span>]</span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cm-appvars</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动 Pod</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./pod_configmap_apply_envfrom.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 Pod 日志</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs pod-configmap-apply-envfrom</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在显示的内容中可以看到，我们在 ConfigMap 中设置的两个变量 apploglevel 和 appdatadir 已经加入进来了</span></span><br><span class="line">apploglevel=INFO</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=pod-configmap-apply-envfrom</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/root</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">appdatadir=/var/data</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br></pre></td></tr></table></figure>

<h2 id="通过Volume使用ConfigMap"><a href="#通过Volume使用ConfigMap" class="headerlink" title="通过Volume使用ConfigMap"></a>通过Volume使用ConfigMap</h2><ul>
<li>ConfigMap 配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap-volume</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 在 applicationContextXml 放的是整个 xml 文件的配置</span></span><br><span class="line">  <span class="attr">applicationContextXml:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line"><span class="string">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line"><span class="string">          xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">          http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span><br><span class="line"><span class="string">          default-autowire=&quot;byName&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;!--</span></span><br><span class="line"><span class="string">            注意上面的default-autowire=&quot;byName&quot;，如果没有这个声明不会被注入</span></span><br><span class="line"><span class="string">        --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">&lt;description&gt;Spring-database配置&lt;/description&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&lt;bean</span> <span class="string">id=&quot;aliyunIntranetStorage&quot;</span> <span class="string">class=&quot;com.olymtech.aliyun.client.oss.AliyunStorageImpl&quot;&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessID&quot;</span> <span class="string">value=&quot;$&#123;oss.accessID&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessKey&quot;</span> <span class="string">value=&quot;$&#123;oss.accessKey&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;ossEndpoint&quot;</span> <span class="string">value=&quot;$&#123;oss.ossIntranetEndpoint&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;bucketName&quot;</span> <span class="string">value=&quot;$&#123;oss.bucketName&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="string">&lt;/bean&gt;</span></span><br><span class="line">        <span class="string">&lt;bean</span> <span class="string">id=&quot;aliyunStorage&quot;</span> <span class="string">class=&quot;com.olymtech.aliyun.client.oss.AliyunStorageImpl&quot;&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessID&quot;</span> <span class="string">value=&quot;$&#123;oss.accessID&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessKey&quot;</span> <span class="string">value=&quot;$&#123;oss.accessKey&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;ossEndpoint&quot;</span> <span class="string">value=&quot;$&#123;oss.ossEndpoint&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;bucketName&quot;</span> <span class="string">value=&quot;$&#123;oss.bucketName&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="string">&lt;/bean&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&lt;bean</span> <span class="string">id=&quot;ediAliyunIntranetStorage&quot;</span> <span class="string">class=&quot;com.olymtech.aliyun.client.oss.AliyunStorageImpl&quot;&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessID&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.accessID&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessKey&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.accessKey&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;ossEndpoint&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.ossIntranetEndpoint&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;bucketName&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.bucketName&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="string">&lt;/bean&gt;</span></span><br><span class="line">        <span class="string">&lt;bean</span> <span class="string">id=&quot;ediAliyunStorage&quot;</span> <span class="string">class=&quot;com.olymtech.aliyun.client.oss.AliyunStorageImpl&quot;&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessID&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.accessID&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;accessKey&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.accessKey&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;ossEndpoint&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.ossEndpoint&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="string">&lt;property</span> <span class="string">name=&quot;bucketName&quot;</span> <span class="string">value=&quot;$&#123;oss-edi.bucketName&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="string">&lt;/bean&gt;</span></span><br><span class="line">    <span class="string">&lt;/beans&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Pod 配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap-volume-apply</span>    <span class="comment"># 指定Pod名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-configmap-volume-apply</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span>  <span class="comment">#指定容器镜像</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment">#配置挂载</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">applicationcontextxml</span> <span class="comment">#x</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/configfiles</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">applicationcontextxml</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pod-configmap-volume</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">applicationContextXml</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">applicationContext.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>验证结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署 ConfigMap</span></span><br><span class="line">kubectl apply -f ./pod_configmap_volume.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署 Pod</span></span><br><span class="line">kubectl apply -f ./pod_configmap_volume_apply.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod-configmap-volume-apply    1/1     Running     0          4m49s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 READY 是 0/1 多执行几次 kubectl get pos, pod 还没启动成功</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入 pod 查看目录</span></span><br><span class="line">kubectl exec -it pod-configmap-volume-apply -- bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前面是进入 pod 的默认目录，而配置挂载在 / 目录下</span></span><br><span class="line">root@pod-configmap-volume-apply:/usr/local/tomcat# ls /</span><br><span class="line">bin  boot  configfiles	dev  etc  home	lib  lib64  media  mnt	opt  proc  root  run  sbin  srv  sys  tmp  usr	var</span><br><span class="line"><span class="meta">#</span><span class="bash">可以看到，有一个 configfiles 目录</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入 configfiles 查看是否存在 applicationContext.xml</span></span><br><span class="line">root@pod-configmap-volume-apply:/usr/local/tomcat# cd /configfiles/</span><br><span class="line"></span><br><span class="line">root@pod-configmap-volume-apply:/configfiles# ls</span><br><span class="line">applicationContext.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到，出现了 applicationContext.xml</span></span><br><span class="line"></span><br><span class="line">root@pod-configmap-volume-apply:/configfiles# cat applicationContext.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 applicationContext.xml 的内容</span></span><br></pre></td></tr></table></figure>



<h1 id="Pod的生命周期和重启策略"><a href="#Pod的生命周期和重启策略" class="headerlink" title="Pod的生命周期和重启策略"></a>Pod的生命周期和重启策略</h1><h2 id="Pod的生命周期"><a href="#Pod的生命周期" class="headerlink" title="Pod的生命周期"></a>Pod的生命周期</h2><p><code>Pod</code> 的生命周期被定义为各种状态， <code>Pod</code> 的状态有五种分别是：<code>Pending</code> 、<code>Running</code> 、<code>Successed</code> 、<code>Failed</code> 、<code>Unknown</code> 。</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Pending</td>
<td>等待，Pod 已经创建，但是Pod内的容器或者镜像还没创建。</td>
</tr>
<tr>
<td>Running</td>
<td>运行中,Pod 内所有容器均已创建，正在运行中。</td>
</tr>
<tr>
<td>Successed</td>
<td>执行成功，该状态表示 Pod 已经执行成功并退出，且不会重启容器。</td>
</tr>
<tr>
<td>Failed</td>
<td>执行失败，该状态表示 Pod 已经退出，但是至少有一个容器为失败状态。</td>
</tr>
<tr>
<td>Unknown</td>
<td>未知，无法获取到 Pod 的正确状态，这种情况一般是网络故障。</td>
</tr>
</tbody></table>
<h2 id="Pod的重启策略"><a href="#Pod的重启策略" class="headerlink" title="Pod的重启策略"></a>Pod的重启策略</h2><p><code>Pod</code> 的重启策略应用于 <code>Pod</code> 内的所有容器，并且仅在 <code>Pod</code> 所处的 <code>Node</code> 上由 kubelet 进行判断和重启操作。当某个容器异常退出或者健康检查失败时，kubelet 将根据 RestartPolicy 配置的重启策略进行相应的处理。</p>
<p><code>Pod</code> 的重启策略主要有三种，分别是: <code>Always</code> 、<code>OnFailure</code> 、<code>Never</code> 。</p>
<table>
<thead>
<tr>
<th>配置值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Always</td>
<td>当容器失效时，由 kubelet 自动重启该容器。<strong>默认值</strong>。</td>
</tr>
<tr>
<td>OnFailure</td>
<td>当容器终止运行，且退出状态码不为 0 时， kubelet 自动重启该容器。</td>
</tr>
<tr>
<td>Never</td>
<td>无论处于何种状态，kubelet 都不会重启该容器。</td>
</tr>
</tbody></table>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap-apply-envfrom</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span>]</span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cm-appvars</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span> <span class="comment">#手动配置该 Pod 的重启策略为 Never</span></span><br></pre></td></tr></table></figure>

<p>Pod 的健康检查，扩缩容，滚动更新以及回滚后面再专门的记录。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~05之Service</title>
    <url>/2021/09/01/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-05%E4%B9%8BService/</url>
    <content><![CDATA[<h1 id="Service作用"><a href="#Service作用" class="headerlink" title="Service作用"></a>Service作用</h1><ul>
<li>Service 通过 <code>label</code> 将 <code>Pod</code> 聚合起来。</li>
<li>为这一组 <code>Pod</code> 提供统一的访问入口(IP和域名)。</li>
<li>将访问的请求负载到 <code>Pod</code> 上。</li>
</ul>
<p><code>Pod</code> 是容器的载体本身是不稳定的，但是 <code>Service</code> 是稳定的。</p>
<h1 id="Service定义"><a href="#Service定义" class="headerlink" title="Service定义"></a>Service定义</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="attr">apiVersion:</span> <span class="string">v1</span>             <span class="comment"># Required</span></span><br><span class="line"> <span class="attr">kind:</span> <span class="string">Service</span>              <span class="comment"># Required</span></span><br><span class="line"> <span class="attr">metadata:</span>                  <span class="comment"># Required</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">string</span>             <span class="comment"># Required</span></span><br><span class="line">   <span class="attr">namespace:</span> <span class="string">string</span>        <span class="comment"># Required</span></span><br><span class="line">   <span class="attr">labels:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">   <span class="attr">annotations:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>                        <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">selector:</span> []              <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">string</span>             <span class="comment"># Required</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">string</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">int</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">int</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="string">int</span></span><br><span class="line">  <span class="attr">status:</span></span><br><span class="line">    <span class="attr">loadBalancer:</span></span><br><span class="line">      <span class="attr">ingress:</span></span><br><span class="line">      <span class="attr">ip:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>

<h1 id="Service的基本使用"><a href="#Service的基本使用" class="headerlink" title="Service的基本使用"></a>Service的基本使用</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>kind 指定 <code>Service</code> ， selector 选择指定的 <code>label</code> ，会将 <code>label</code> 包含  <code>app:web</code> 的所有 <code>Pod</code> 都加到这个 <code>Service</code> 中来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./service_create.yaml</span><br></pre></td></tr></table></figure>

<h2 id="Service的访问"><a href="#Service的访问" class="headerlink" title="Service的访问"></a>Service的访问</h2><ul>
<li>IP: <code>Service</code> 拥有自己的 IP 可以使用该 IP 进行访问，访问进来后会将请求负载到某一个 <code>Pod</code> 上。</li>
<li>DNS: <code>Service</code> 也可以通过域名进行访问。DNS 需要部署 <code>core-dns</code> 或其他 DNS 组件，后面专门研究。</li>
</ul>
<h2 id="Service负载策略"><a href="#Service负载策略" class="headerlink" title="Service负载策略"></a>Service负载策略</h2><ul>
<li>RoundRobin: 轮询模式，即每一次请求都按次序分发到每一个 <code>Pod</code> 上。</li>
<li>SessionAffinity: 会话亲和模式，即基于客户端 IP 进行会话保持，第一次将请求分发到哪一个 <code>Pod</code> 之后的请求全都分发到该 <code>Pod</code> 上。</li>
</ul>
<h2 id="Service多端口"><a href="#Service多端口" class="headerlink" title="Service多端口"></a>Service多端口</h2><ul>
<li><p>同协议：需要指定名称</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span>  <span class="comment">#第一个端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8002</span>  <span class="comment">#第二个端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8002</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">manager</span></span><br></pre></td></tr></table></figure></li>
<li><p>不同协议</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dns</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">53</span></span><br><span class="line">    <span class="attr">portocol:</span> <span class="string">UDP</span> <span class="comment">#指定 UDP 协议</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dns-tcp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">53</span></span><br><span class="line">    <span class="attr">portocol:</span> <span class="string">TCP</span> <span class="comment">#指定 TCP 协议</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="外部服务Service"><a href="#外部服务Service" class="headerlink" title="外部服务Service"></a>外部服务Service</h2><p>场景：需要将数据库或其他 namespace 中的服务做为后端服务。可以创建一个没有 label selector 的 Service。然后再手动创建一个和 Service 同名的 <code>Endpoints</code> 。</p>
<ul>
<li><p>Service</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li>
<li><p>EndPoint</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">IP:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/Service%E6%8C%87%E5%90%91%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1.jpg" alt="Service指向外部服务"></p>
<h1 id="集群外访问Service"><a href="#集群外访问Service" class="headerlink" title="集群外访问Service"></a>集群外访问Service</h1><p><code>Pod</code> 和 <code>Service</code> 都是 k8s 中的概念，对于外部来说都是无法感知的。为了让宿主机能够访问这些服务，可以将<code>Pod</code> 或 <code>Service</code> 的端口号映射到宿主机，使客户端能够通过物理机访问容器内的应用。</p>
<h2 id="将Pod的端口号映射到宿主机"><a href="#将Pod的端口号映射到宿主机" class="headerlink" title="将Pod的端口号映射到宿主机"></a>将Pod的端口号映射到宿主机</h2><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul>
<li>创建 nginx 的 Pod</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span> <span class="comment">#指定 Pod名称</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">hostPort:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./pod_mapping.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 Pod 状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod nginx</span><br><span class="line"></span><br><span class="line">NAME     READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">webapp   1/1     Running   0          61m   172.17.0.7   minikube   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果看 STATUS 状态不是 Running 的话，说明该 Pod 未启动成功</p>
</blockquote>
<ul>
<li>登录 Node 访问该端口</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">minikube ssh</span><br><span class="line">curl 127.0.0.1:81 #前面指定了映射端口是 81</span><br><span class="line">curl 192.168.49.2:81 # Node 的 IP 地址是 192.168.49.2，使用这个 IP 地址与上面效果相同</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 kubectl get node -o wide 可以查看 Node 的 IP 地址</p>
</blockquote>
<ul>
<li>在查看 <code>Pod</code> 的日志</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs -f nginx</span><br><span class="line"></span><br><span class="line">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class="line">/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class="line">10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class="line">10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class="line">/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class="line">/docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: using the &quot;epoll&quot; event method</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: nginx/1.21.1</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: built by gcc 8.3.0 (Debian 8.3.0-6)</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: OS: Linux 5.10.47-linuxkit</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker processes</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 32</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 33</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 34</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 35</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 36</span><br><span class="line">2021/09/05 13:40:57 [notice] 1#1: start worker process 37</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">172.17.0.1 - - [05/Sep/2021:13:41:36 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.68.0&quot; &quot;-&quot;</span><br><span class="line">192.168.49.2 - - [05/Sep/2021:13:46:06 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.68.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>



<h3 id="设置hostNetwork"><a href="#设置hostNetwork" class="headerlink" title="设置hostNetwork"></a>设置hostNetwork</h3><p>通过设置 hostNetwork=true 将 <code>Pod</code> 中的端口暴露出来，本质上也是暴露端口，只是 hostNetwork 是将所有端口都暴露。</p>
<ul>
<li>创建 <code>Pod</code> </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span> <span class="comment">#设置为 true</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./pod_mapping.yaml</span><br></pre></td></tr></table></figure>

<p>后面操作与上面一致，登录 node 访问nginx，通过查看日志判断是否有请求到。</p>
<h2 id="将Service的端口号映射到宿主机"><a href="#将Service的端口号映射到宿主机" class="headerlink" title="将Service的端口号映射到宿主机"></a>将Service的端口号映射到宿主机</h2><h3 id="映射Service端口"><a href="#映射Service端口" class="headerlink" title="映射Service端口"></a>映射Service端口</h3><ul>
<li>创建 <code>Service</code> </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30000</span>  <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./service_mapping.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li>访问 nginx</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:30000</span><br></pre></td></tr></table></figure>

<ul>
<li>通过查看 nginx <code>Pod</code> 的日志判断是否请求进来</li>
</ul>
<h3 id="设置-LoadBalancer"><a href="#设置-LoadBalancer" class="headerlink" title="设置 LoadBalancer"></a>设置 LoadBalancer</h3><p>例如: 阿里云 SLB</p>
<h1 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h1><p>Kubernetes 1.11 版本开始， DNS 服务由 CoreDNS 提供。</p>
<h1 id="Ingress-HTTP-7层路由"><a href="#Ingress-HTTP-7层路由" class="headerlink" title="Ingress: HTTP 7层路由"></a>Ingress: HTTP 7层路由</h1><p>在我们部署应用时，我们很多时候的需求是这样的：</p>
<p><a href="https://xxx.xx/api">https://xxx.xx/api</a> 希望将请求打到 api 的 <code>Service</code> 上;</p>
<p><a href="https://xxx.xx/web">https://xxx.xx/web</a> 希望将请求打到 web 的 <code>Service</code> 上；</p>
<p>同时，我们的端口是同一个端口。即是通过 <code>uri</code> 来区分不同的服务。这个功能就需要使用到 <code>Ingress</code> 来进行 HTTP 层的路由转发。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>自学k8s系列~06之滚动更新</title>
    <url>/2021/09/04/%E8%87%AA%E5%AD%A6k8s%E7%B3%BB%E5%88%97-06%E4%B9%8B%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="Pod健康检查与服务可用性检查"><a href="#Pod健康检查与服务可用性检查" class="headerlink" title="Pod健康检查与服务可用性检查"></a>Pod健康检查与服务可用性检查</h1><p>Kubenetes 对 Pod 的健康检查可用两类探针来进行检查: <strong>LivenessProbe</strong> 和 <strong>ReadinessProbe</strong> 。</p>
<h2 id="LivenessProbe"><a href="#LivenessProbe" class="headerlink" title="LivenessProbe"></a>LivenessProbe</h2><p>判断容器是否存活，主要是对 Running 状态进行检测，如果检测到不健康，则将该容器杀掉然后根据容器的重启策略做相应的处理。如果容器没有指定 LivenessProbe 探针，则 kubelet 认为该容器永远是健康的。</p>
<h2 id="ReadinessProbe"><a href="#ReadinessProbe" class="headerlink" title="ReadinessProbe"></a>ReadinessProbe</h2><p>ReadinessProbe 探针主要用于判断容器服务是否可用，即是否处于(Ready状态)。达到 Ready 状态的 Pod 才可以接收请求，如果容器不是 Ready 状态则自动将该容器从 Service 的 Endpoing 列表中隔离出去。当容器恢复到 Ready 状态时，再将容器加入到 Endping 列表中。这样就能保证容器如果没有处于 Ready 状态就不会有流量请求到该 Pod 上。</p>
<h2 id="探针实现方式"><a href="#探针实现方式" class="headerlink" title="探针实现方式"></a>探针实现方式</h2><p><strong>LivenessProbe</strong> 和 <strong>ReadinessProbe</strong> 都可以配置以下三种实现方式和自定义扩展的方式。</p>
<h3 id="ExecAction"><a href="#ExecAction" class="headerlink" title="ExecAction"></a>ExecAction</h3><p>在容器内部执行一个命令，如果该命令返回码为 0 ，则标志着该容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">ok</span> <span class="string">&gt;</span> <span class="string">/tmp/headlth;</span> <span class="string">sleep</span> <span class="number">10</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/health;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/health</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建了一个文件位于 /tmp 目录下，10 秒后将期删除，然后探针去检测该文件。该 Pod 会被判断为不健康，执行多次重启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod liveness</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness   1/1     Running   2          2m30s</span><br></pre></td></tr></table></figure>



<h3 id="TCPSocketAction"><a href="#TCPSocketAction" class="headerlink" title="TCPSocketAction"></a>TCPSocketAction</h3><p>通过容器的 IP 地址和端口号执行 TCP 检查，如果能够建立 TCP 链接，则表明容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">goproxy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">snail007/goproxy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>RESTARTS</code> 可以查看到重启的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">NAME           READY   STATUS             RESTARTS   AGE</span><br><span class="line">goproxy        0/1     CrashLoopBackOff   3          93s</span><br><span class="line">webapp-f2ckt   1/1     Running            1          24h</span><br><span class="line">webapp-wsllj   1/1     Running            1          24h</span><br></pre></td></tr></table></figure>



<h3 id="HTTPGetAction"><a href="#HTTPGetAction" class="headerlink" title="HTTPGetAction"></a>HTTPGetAction</h3><p>通过容器的 IP 地址、端口号及路径调用 HTTP GET 方法，如果响应码(HttpStatusCode) 大于等于 200 且小于 400，则表明容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>



<h1 id="Pod的升级"><a href="#Pod的升级" class="headerlink" title="Pod的升级"></a>Pod的升级</h1><p>Pod 升级时，使用 <code>kubectl edit xxx.yaml</code> ，将自动进行 <code>Pod</code> 升级操作。升级过程如下:</p>
<ol>
<li>先创建一个新的 <code>ReplicaSet</code> ，将副本设为1.</li>
<li>老的 <code>ReplicaSet</code> 副本缩减1.</li>
<li>重复以上过程</li>
</ol>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/Pod%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0.jpg" alt="Pod滚动更新"></p>
<h2 id="升级策略"><a href="#升级策略" class="headerlink" title="升级策略"></a>升级策略</h2><ul>
<li>重建(Recreate): 设置 <code>spec.strategy.type=Recreate</code> 。在创建 <code>Pod</code> 的时候会先杀掉所有正在运行的 <code>Pod</code> ，然后创建新的 <code>Pod</code></li>
<li>滚动更新(RollingUpdate): 设置 <code>spec.strategy.type=RollingUpdate</code> 。<code>Deployment</code> 会以滚动更新的方式来逐个更新 <code>Pod</code> ，配合参数 <code>spec.strategy.type.RollingUpdate.maxUnavailabel</code> 和 <code>spec.strategy.type.RollingUpdate.maxSurge</code> 可以控制滚动更新的过程。</li>
</ul>
<h1 id="Pod的回滚"><a href="#Pod的回滚" class="headerlink" title="Pod的回滚"></a>Pod的回滚</h1><h1 id="Pod的扩缩容"><a href="#Pod的扩缩容" class="headerlink" title="Pod的扩缩容"></a>Pod的扩缩容</h1><p><code>Pod</code> 的扩缩容其实就是维持 <code>Pod</code> 的数量，当 <code>Pod</code> 数量增加是就是<strong>扩容</strong>,当 <code>Pod</code> 数量减少时就是<strong>缩容</strong>。扩缩容有<strong>手动</strong>和<strong>自动</strong>两种方式。</p>
<ul>
<li>手动扩缩容：手动的去调整 <code>pod</code> 的数量。通过 <code>--replicas</code> 指定 <code>Pod</code> 的数量，也可以在 yaml 文件中调整 <code>spec.replicas</code> 的值</li>
<li>自动扩缩容：使用者指定一些指标并指定 <code>Pod</code> 数量的范围，系统将在这个范围内自动调整 <code>Pod</code> 的数量。</li>
</ul>
<h2 id="手动扩缩容"><a href="#手动扩缩容" class="headerlink" title="手动扩缩容"></a>手动扩缩容</h2><ul>
<li>命令方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment pod_name -- replicas podNumber #通过指定 --replicase 来指定 pod 数量完成扩缩容</span><br></pre></td></tr></table></figure>

<ul>
<li>yaml 方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">scale</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>  <span class="comment">#指定 Pod 副本数</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">scale</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">scale</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">scale</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<h2 id="自动扩缩容"><a href="#自动扩缩容" class="headerlink" title="自动扩缩容"></a>自动扩缩容</h2><p>自动扩缩容指标：Pod 资源使用率、Pod 自定义指标、Object 自定义指标或外部自定义指标。</p>
<ul>
<li><input disabled="" type="checkbox"> todo 自动扩缩容目前暂时没有场景，不深入研究。</li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>自学 k8s 系列，到这里我准备暂时告一段落了，等过三个月后再回来复习复习 k8s 的内容。2021-08-24开始学习 k8s 到今天 2021-09-07 也有 15 天时间，时间也不算长。当时学习 k8s 是因为现在 k8s 实在太火了，各种大会各路大牛几乎都在提 k8s ，这么火的东西我想要了解它到底是什么(应用层面^_^)。k8s 的基本概念和一些简单操作也算是入门了，在当前的工作中也没有这方面的应用场景，所以打算暂停了，同时为了避免自己学过的东西遗忘也定下了 3 个月后再回来复习的目标。</p>
<ul>
<li><input disabled="" type="checkbox"> 2021-12-07 开始回来复习 k8s 的内容。</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑记录</title>
    <url>/2021/08/24/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="IDEA-编译OOM"><a href="#IDEA-编译OOM" class="headerlink" title="IDEA 编译OOM"></a>IDEA 编译OOM</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>fms 工程在编译时，抛出 OOM 异常，使用 Maven 编译是正常的。在编译过程中发现两个问题。</p>
<ul>
<li>除了 javac 编译外，还在使用 kotlin 编译</li>
<li>系统剩余内存足够，使用 Maven 编译的 war 包可以在 tomcat 中正常启动。</li>
</ul>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>IDEA 可以设置编译时的堆(HEAP)大小，默认值是 700(MBytes) ,一般的工程也足够但是 fms 不够，超过了 700(MBytes) 就报 OOM。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>在 IDEA 中设置编译时的堆大小。</li>
</ul>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/image-20210402114028110.png" alt="IDEA设置编译时堆内存"></p>
<h1 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h2><p>在 <code>doraemon-fs </code> 中写了 spring 的 bean，然后增加了一个配置类，在配置类中使用 <code>@ComponentScan</code> 注解配置对扫描的包名，在写了一个 <code>@EnableFsQuery</code> 注解，在 mdm 启动类上打注解 <code>@EnableFsQuery</code>，mdm 启动时无法注入指定的 bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(FsMongoConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFsQuery &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p><code>@EnableFsQuery</code> 注解上没有打生命周期对应的注解。泛型的默认 <code>RetentionPolicy.CLASS</code> ，在运行期间不保留注解。</p>
<h2 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(FsMongoConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFsQuery &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="自定义切面启动异常"><a href="#自定义切面启动异常" class="headerlink" title="自定义切面启动异常"></a>自定义切面启动异常</h1><h2 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h2><p>Spring 启动报异常:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:0 can&#x27;t find referenced pointcut</span><br></pre></td></tr></table></figure>

<h2 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h2><p>AspectJ 依赖包 <code>aspectjweaver</code> 版本过低导致。</p>
<h2 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h2><p>升级依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>踩过的坑</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>踩坑</tag>
        <tag>泛型擦除</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Java并发——00之目录</title>
    <url>/2021/11/24/%E9%87%8D%E5%AD%A6Java%E5%B9%B6%E5%8F%91%E2%80%94%E2%80%9400%E4%B9%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p> <a href="/2021/11/24/%E9%87%8D%E5%AD%A6Java%E5%B9%B6%E5%8F%91%E2%80%94%E2%80%9401%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/">重学Java并发——01之线程基础</a></p>
<h1 id="对自己说"><a href="#对自己说" class="headerlink" title="对自己说"></a>对自己说</h1>]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Java并发——01之线程基础</title>
    <url>/2021/11/24/%E9%87%8D%E5%AD%A6Java%E5%B9%B6%E5%8F%91%E2%80%94%E2%80%9401%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="多线程的状态"><a href="#多线程的状态" class="headerlink" title="多线程的状态"></a>多线程的状态</h2><p><code>java.lang.Thread.State</code> 定义了线程的状态。</p>
<ul>
<li>NEW</li>
<li>RUNNABLE</li>
<li>BLOCKED</li>
<li>WAITINT</li>
<li>WAIT_TIMEOUT</li>
<li>TERMINTED</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>警钟长鸣~01之19年一次记录</title>
    <url>/2021/10/11/%E8%AD%A6%E9%92%9F%E9%95%BF%E9%B8%A3-01%E4%B9%8B19%E5%B9%B4%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="关于-6-14-日晚上上线客户价值的总结"><a href="#关于-6-14-日晚上上线客户价值的总结" class="headerlink" title="关于 6.14 日晚上上线客户价值的总结"></a>关于 6.14 日晚上上线客户价值的总结</h1><h2 id="上线内容"><a href="#上线内容" class="headerlink" title="上线内容"></a>上线内容</h2><ul>
<li>客户价值定时任务</li>
<li>hotel-manger (门店后台)</li>
</ul>
<h2 id="涉及模块"><a href="#涉及模块" class="headerlink" title="涉及模块"></a>涉及模块</h2><h3 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h3><ul>
<li>pig-yd-service</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>添加字段，后面字段没有被使用，已废弃该字段，但是没有及时从数据库中删除</p>
<h3 id="其他开发"><a href="#其他开发" class="headerlink" title="其他开发"></a>其他开发</h3><ul>
<li>hotel-manager (门店后台)</li>
</ul>
<h2 id="上线前的准备"><a href="#上线前的准备" class="headerlink" title="上线前的准备"></a>上线前的准备</h2><ul>
<li><p>数据库脚本</p>
</li>
<li><p>合并代码(未及时合并到 master)</p>
<blockquote>
<p>当时没有使用 git-flow 这种工作流的试试，将 master 分支合并到开发分支，然后用开发分支打包上线。</p>
</blockquote>
</li>
</ul>
<h2 id="上线过程"><a href="#上线过程" class="headerlink" title="上线过程"></a>上线过程</h2><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ul>
<li>git 合并</li>
</ul>
<p>非常不顺利</p>
<h2 id="事故原因"><a href="#事故原因" class="headerlink" title="事故原因"></a>事故原因</h2><ul>
<li><p>执行初始化方法第一次 404 。原因是没有将代码合并到 master 分支，重新合并分支并上线。</p>
</li>
<li><p>执行初始化接口第二次失败，原因是有一条异常数据。</p>
</li>
<li><p>docker 上没有日志，没有将日志打印到控制台上</p>
</li>
<li><p>执行任务中途报错，有两个字段在测试环境中添加的后来废弃不使用了，生产环境数据库中没有这两个字段， SQL 执行报错。修改代码，从 Mybatis 配置文件和 Entity 对象中删除这两个字段的映射</p>
</li>
<li><p>执行任务中途报错，数据库中有 <code>meal_type_name</code> 数据异常，值为<code>午餐</code>但是后面有很多空格，整个字段长度超过新建表中定义的长度。</p>
<blockquote>
<p>在代码中取该字段值的地方加上 trim() 方法</p>
</blockquote>
</li>
<li><p>打开门店后台页面，有一个接口报错，原因是有两个字段在测试环境下添加废弃后未删除，被映射进了 Mybatis 的 xml 和 Entity 对象中，查询时报 <code>Unknown cloumn &#39;MAN_VIP_ID&#39; xxx</code></p>
</li>
<li><p>定时调度的任务不执行，原因是代码中的逻辑错误，导致 <code>if </code> 永远都为 <code>false</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime startTime1 = LocalTime.of(<span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">LocalTime startTime2 = LocalTime.of(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">LocalTime nowTime = LocalTime.now();</span><br><span class="line"><span class="keyword">if</span> (nowTime.isAfter(startTime1) &amp;&amp; nowTime.isBefore(startTime2)) &#123;</span><br><span class="line">  xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h2><h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><ul>
<li>开发阶段需求不够明确，基本都是似是而非。重述时，不能完成的讲出来每个字段的取值逻辑，只是能够听懂。<ul>
<li>规避，开会说明需求后，还要自己再仔细过一遍，对于每个计算字段是如何由来的，必须做到自己能够讲清楚，对于涉及到的表，必须要知道。</li>
</ul>
</li>
<li>开发前，对异常状态考虑不够周全，写出的代码健壮性不够。<ul>
<li>对所有数据都要认为不可靠，包含输入的和数据库中查到的，必须进行一次校验</li>
<li>考虑到如果系统发生故障，再重新恢复后的情况</li>
<li>如果是定时任务，任务本身要可控，可停，可启</li>
<li>要做幂等，如果是定时任务，同一个任务，多次执行结果应该是一样</li>
<li>代码执行过程要有日志，可以看到执行的痕迹，并且执行出错后可恢复</li>
<li>代码执行的最大时间要可控，不能出现超长执行，定时任务，一家酒店的数据执行时间长达 30 分钟是不正确的。</li>
<li>数据库查询，要考虑到上游的数据会持续增长，单次的查询量要固定或者控制在一个阈值之内，量大的时候多次去查询</li>
<li>插入数据，数据库数据可观察，避免出现大事务提交的情况</li>
<li>尽可能使用多线程处理，以提高性能</li>
</ul>
</li>
<li>业务理解<ul>
<li>充分理解需求，能够说清楚需求中每项数据的来源和流向，同时也能向别人讲述清楚，反复同产品确认</li>
<li>清楚受众，功能提供给谁，在什么场景下使用</li>
<li>对其他模块/系统是否存在影响<ul>
<li>现有表结构有无修改字段名称、类型、长度等</li>
<li>现有表是否有删除/添加字段</li>
<li>如果是新建表，表中数据是否要与其他现有表数据同步变动</li>
<li>数据库中数据的来源是否有多处，其他模块/系统需要增加插入到新库的代码</li>
<li>新建表中数据增加，是否需要往其他表中插入数据</li>
</ul>
</li>
<li>保持质疑，如果觉得某个做法有不合理，及时提出</li>
</ul>
</li>
<li>编码<ul>
<li>使用合适的数据类型， Entity 中不使用基本类型</li>
<li>对数据所有的来源都认为不可靠，需要做判断<ul>
<li>代码要做健壮性判断，宁可多写 <code>if (xxx != null)</code> </li>
<li>字符串考虑空格的问题，要去除前后空格</li>
<li>判断的逻辑，测试时，要把 <code>true</code> 与 <code>false</code> 都覆盖到，不能只测单个可能</li>
<li>边界值，在做除法操作时，除数不能为 0，乘法时也要考虑 * 0 的情况</li>
<li>有浮点数(小数)时，要考虑到精度问题，以及取舍方式。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>在 2021-10-11 无意中再翻到的，发现之前记的一些东西现在做得也并不是那么好。</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker——操作篇</title>
    <url>/2021/08/25/Docker%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>以前学习 Docker 的笔记，主要是一些 Docker 的操作。</p>
</blockquote>
<h1 id="使用-Docker-镜像"><a href="#使用-Docker-镜像" class="headerlink" title="使用 Docker 镜像"></a>使用 Docker 镜像</h1><p>Docker 运行容器前需要本地存在对应的镜像，如果镜像没保存在本地， Docker 会尝试先从默认镜像仓库下载(默认使用 Docker Hub 公共注册服务器中的仓库)，也可以通过配置，使用自定义的镜像仓库。</p>
<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>使用 <code>docker pull</code>命令直接从 Docker Hub 镜像源来下载镜像。命令格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull NAME[: TAG]</span><br><span class="line"># NAME 是镜像的仓库名称</span><br><span class="line"># TAG 是镜像的标签</span><br><span class="line"># 对于 Docker 镜像来说，如果不显式指定 TAG 则默认会选择 latest 标签，这会下载仓库中最新版本的镜像。</span><br></pre></td></tr></table></figure>
<p><code>docker pull</code> 命令 <code>NAME</code> 中还应包含 <code>registry</code> 默认为 <code>docker hub</code>，即 <code>registry.hub.docker.com</code> ，如果从其他 <code>registry</code> 中下载镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull hub.c.163.com/public/ubuntu:14.04</span><br></pre></td></tr></table></figure>
<ul>
<li>pull 命令支持的选项</li>
<li>a, –all-tags=true|false: 是否获取仓库中所有镜像，默认为否</li>
</ul>
<h2 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h2><h3 id="使用-images-命令列出镜像"><a href="#使用-images-命令列出镜像" class="headerlink" title="使用 images 命令列出镜像"></a>使用 <code>images</code> 命令列出镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<p>上面命令可以列出本地主机上已有镜像的基本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">hub.c.163.com/public/ubuntu   14.04               f6a575b7c805        2 years ago         237.1 MB</span><br></pre></td></tr></table></figure>

<ul>
<li>REPOSITORY 来自于哪个仓库</li>
<li>TAG 镜像的标签信息</li>
<li>IMAGE ID 镜像的 ID</li>
<li>CREATED 创建时间，说明镜像的最后更新时间</li>
<li>VIRTUAL SIZE 镜像大小</li>
</ul>
<h3 id="images-子命令主要支持的选项"><a href="#images-子命令主要支持的选项" class="headerlink" title="images 子命令主要支持的选项"></a>images 子命令主要支持的选项</h3><ul>
<li>-a, –all=true|false : 列出所有的镜像文件（包括临时文件），默认为false</li>
<li>–digests=true|false : 列出镜像的数字摘要值，默认为false</li>
<li>-f, –filter=[] : 过滤列出的镜像，</li>
<li>–format=”TEMPLATE” : 控制输出格式，如 ID 代表 ID 信息， Repository 代表仓库信息等</li>
<li>–no-trunc=true|false : 对输出结果中太长的部分是否进行截断，如镜像的 ID 信息，默认为 true</li>
<li>-q, –quiet=true|false : 仅输出 ID 信息，默认为 false</li>
</ul>
<h2 id="使用-tag-命令添加镜像标签"><a href="#使用-tag-命令添加镜像标签" class="headerlink" title="使用 tag 命令添加镜像标签"></a>使用 tag 命令添加镜像标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag ubuntu:latest mybuntu:latest</span><br></pre></td></tr></table></figure>
<p>添加一个新的 <code>myubuntu:latest</code> 镜像标签</p>
<h3 id="使用-inspect-命令查看详细信息"><a href="#使用-inspect-命令查看详细信息" class="headerlink" title="使用 inspect 命令查看详细信息"></a>使用 <code>inspect</code> 命令查看详细信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect mybuntu:14.04</span><br></pre></td></tr></table></figure>
<p>返回的是 JSON 格式的长信息，如果只需要其中一项内容时，可以使用参数 -f 来指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect -f &#123;&#123;&quot;.Architecture&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-history-命令查看镜像历史"><a href="#使用-history-命令查看镜像历史" class="headerlink" title="使用 history 命令查看镜像历史"></a>使用 <code>history</code> 命令查看镜像历史</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker history centos:7.0</span><br></pre></td></tr></table></figure>
<p>过长的命令会被自动截断，可以使用 <code>--no-trunc</code> 选项输出完整命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker history --no-trunc centos:7.0</span><br></pre></td></tr></table></figure>

<h2 id="搜寻镜像"><a href="#搜寻镜像" class="headerlink" title="搜寻镜像"></a>搜寻镜像</h2><p>使用 <code>docker search</code> 命令可以搜索远端仓库中共享的镜像，默认搜索官方仓库中的镜像。用法为 <code>docker search TERM</code> ，支持的参数主要包括</p>
<ul>
<li>–automated=true|false : 仅显示自动创建的镜像，默认为 false</li>
<li>–no-trunc=true|false : 输出信息不截断显示，默认为 false</li>
<li>-s, –stars=X : 指定仅显示评价为指定星级以上的镜像，默认为 0，输出所有镜像</li>
</ul>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><h3 id="使用标签删除镜像"><a href="#使用标签删除镜像" class="headerlink" title="使用标签删除镜像"></a>使用标签删除镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi myubuntu:latest</span><br></pre></td></tr></table></figure>
<p>当某个镜像有多个标签时，删除指定的标签，而不会删除标签所指向的镜像。但当镜像只有一个标签时，会将镜像彻底删除</p>
<h3 id="使用镜像-ID-删除镜像"><a href="#使用镜像-ID-删除镜像" class="headerlink" title="使用镜像 ID 删除镜像"></a>使用镜像 ID 删除镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGEID</span><br></pre></td></tr></table></figure>
<p>当有容器在运行时，无法删除，可以使用 <code>-f</code> 选项进行强制删除</p>
<h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>创建镜像的方式有三种：</p>
<ul>
<li>基于已有镜像的容器创建</li>
<li>基于本地模板导入</li>
<li>基于 Dockerfile 创建</li>
</ul>
<h3 id="基于已有镜像的容器创建"><a href="#基于已有镜像的容器创建" class="headerlink" title="基于已有镜像的容器创建"></a>基于已有镜像的容器创建</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit[OPTIONS]CONTAINER[REPOSITORY[: TAG]]</span><br></pre></td></tr></table></figure>
<p>主要选项包括：</p>
<ul>
<li>-a, –author=””: 作者信息</li>
<li>-c, –change=[]: 提交的时候执行 Dockerfile 指令</li>
<li>-m, –message=”” : 提交消息</li>
<li>-p, –pause=true : 提交时暂停容器运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;new file&quot; -a &quot;sjl&quot; c8ac5a420141 test:1.0</span><br></pre></td></tr></table></figure>

<h3 id="基于本地模板导入"><a href="#基于本地模板导入" class="headerlink" title="基于本地模板导入"></a>基于本地模板导入</h3><p>用户可以直接从一个操作系统模板文件中导入一个镜像，主要使用 <code>docker import</code> 命令，其命令格式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker import[OPTIONS] file|URL|-[REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>
<p>未测试</p>
<h2 id="存出和载入镜像"><a href="#存出和载入镜像" class="headerlink" title="存出和载入镜像"></a>存出和载入镜像</h2><h3 id="存出镜像"><a href="#存出镜像" class="headerlink" title="存出镜像"></a>存出镜像</h3><p>如果要导出镜像到本地文件，可以使用 <code>docker save</code> 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o outputpath image</span><br></pre></td></tr></table></figure>
<p>演示命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -0 centos_7.0.tar centos:7.0</span><br></pre></td></tr></table></figure>

<h3 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h3><p>可以使用 <code>docker load</code> 命令将导出/存出的镜像导入到本地镜像库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load centos_7.0.tar</span><br></pre></td></tr></table></figure>

<h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p>使用 <code>docker push</code> 命令上传镜像到仓库，默认上传到 <code>Docker Hub</code> 官方仓库，其命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push NAME[:TAG]|[REGISTRY_HOST [:REGISTRY_PORT]/]NAME[:TAG]</span><br></pre></td></tr></table></figure>
<p>未测试，注册 docker hub 或阿里云 docker 账号后进行测试</p>
<h1 id="操作-Docker-容器"><a href="#操作-Docker-容器" class="headerlink" title="操作 Docker 容器"></a>操作 Docker 容器</h1><p>容器是 <code>docker</code> 另一个核心概念，容器是镜像的运行实时。镜像是静态只读文件，而容器带有运行时需要的可写文件层。</p>
<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><h3 id="新建容器"><a href="#新建容器" class="headerlink" title="新建容器"></a>新建容器</h3><p>新建容器使用 <code>docker create</code> 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker create -it centos:7.0</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker crate</code> 命令新建的容器处于停止状态，可以使用 <code>docker start</code> 命令来启动它。</p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>使用 <code>docker start</code> 命令来启动一个已经创建的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start ID</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker ps -a</code> 查看所有镜像 <code>docker ps</code> 查看一个运行中的容器</p>
<h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><p>容器启动步骤</p>
<ul>
<li><code>docker create</code> 创建容器</li>
<li><code>docker start</code> 启动容器<br>使用 <code>docker run</code> 命令将创建容器和启动容器合并成一个步骤<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run centos:7.0 /bin/echo &#x27;hello world!&#x27;</span><br></pre></td></tr></table></figure>
当利用 <code>docker run</code> 来创建并启动容器时，<code>Docker</code> 在后台运行操作：</li>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建一个容器，并启动该容器</li>
<li>分配一个文件系统给容器，并在只读的镜像外面挂载一层可读写层</li>
<li>从宿主机配置的网桥接口中桥接一个虚拟接口到容器中</li>
<li>从网桥的地址池配置一个 IP 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被自动终止</li>
</ul>
<p>使用 <code>Ctrl + d</code> 或输入 <code>exit</code> 命令来退出容器</p>
<h4 id="常见的错误代码"><a href="#常见的错误代码" class="headerlink" title="常见的错误代码"></a>常见的错误代码</h4><ul>
<li>125 : Docker daemon 执行出错，例职指定了不支持的 Docker 命令参数</li>
<li>126 : 所指定命令无法执行，例如权限出错 </li>
<li>127 : 容器内命令无法找到</li>
</ul>
<h3 id="守护态运行"><a href="#守护态运行" class="headerlink" title="守护态运行"></a>守护态运行</h3><p>正常的生产环境下，我们需要让 Docker 容器在后台以守护态(Daemonized)形式运行，此时可以通过添加 <code>-d</code> 参数来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d centos:7.0</span><br></pre></td></tr></table></figure>

<h4 id="获取容器的输出信息"><a href="#获取容器的输出信息" class="headerlink" title="获取容器的输出信息"></a>获取容器的输出信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs id</span><br></pre></td></tr></table></figure>

<h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>使用 <code>docker stop</code> 来终止一个运行中的容器。该命令格式为 <code>docker stop[-t|--time[=10]][CONTAINER...]</code><br>首先向容器发送 SIGTERM 信号，等待一段超时时间(默认为 10 秒)后，再发送 SIGKILL 信号来终止 容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop id</span><br></pre></td></tr></table></figure>
<h3 id="docker-kill"><a href="#docker-kill" class="headerlink" title="docker kill"></a>docker kill</h3><p><code>docker kill</code> 命令会直接发送 SIGKILL 信号来强行终止容器。</p>
<p>当 <code>Docker</code> 容器中指定的应用终结时，容器也会自动终止<br>处于终止状态的容器，可以通过 <code>docker start</code> 命令来重新启动</p>
<h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart id</span><br></pre></td></tr></table></figure>
<p>会将一个运行状态的容器先终止，然后再重启</p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>使用 <code>-d</code> 参数启动的 docker 容器，无法看到容器的信息，也无法进行操作，此时如果需要进入容器进行操作，有多种方法：</p>
<h3 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a>attach 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach [--detach-keys[=[]]] [--no-stdin] [--sig-proxy[[=true]]CONTAINER</span><br></pre></td></tr></table></figure>
<p>支持三个主要选项</p>
<ul>
<li>–detach-keys[=[]] : 指定退出 attach 模式的快捷键序列，默认是 CTRL -P CTRL -Q</li>
<li>–no-stdin=true|false : 是否关闭标准输入，默认是保持打开</li>
<li>-sig-proxy=true|false : 是否代理收到的系统信号给应用进程，默认为 true</li>
</ul>
<h3 id="exec-命令-推荐"><a href="#exec-命令-推荐" class="headerlink" title="exec 命令(推荐)"></a>exec 命令(推荐)</h3><p>docker 从 1.3.0 提供了一个更加方便的 <code>exec</code> 命令，可以在容器内直接执行任意命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec [-d|--detach][--detach-keys[=[]]][-i|--interactive][--privileged][-t|--tty][-u|--user[=USER]]CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>-i, –interactive=true|false : 打开标准输入接受用户输入命令，默认为 false</li>
<li>–privileged=true|false : 是否给执行命令以最高权限，默认为 false</li>
<li>-t, –tty=true|false : 分配伪终端，默认为 false</li>
<li>u, –user=”” : 执行命令的用户名或 ID<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it id /bin/bash</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="nsenter-工具"><a href="#nsenter-工具" class="headerlink" title="nsenter 工具"></a>nsenter 工具</h3><p>额外安装工具包</p>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>使用 <code>docker rm</code> 命令来删除处于终止或退出状态的容器，其命令格式为 `docker rm[-f|–force][-l|–link][-v|–volumes]CONTAINER[CONTAINER…]<br>主要支持的选项</p>
<ul>
<li>-f, –force=false : 是否强行终止并删除一个运行中的容器</li>
<li>-l, –link=false : 删除容器的连接，但保留容器</li>
<li>-v, –volumes=false : 删除容器挂载的数据卷</li>
</ul>
<h2 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h2><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><p>导出容器是指导出一个已经创建的容器到一个文件，不管此时这个容器是否牌运行状态，可以使用 <code>docker export</code> 命令，该命令的格式为 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker[-o|--output[=&quot;&quot;]]CONTAINER</span><br></pre></td></tr></table></figure>
<p>通过 <code>-o</code> 选项来指定导出的 <code>tar</code> 文件名，也可以直接通过重定向来实现</p>
<h3 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h3><p>导出的文件可以使用 <code>docker import</code> 命令变成镜像，该文件格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker import [-c|--change[=[]]][-m|--message[=MESSAGE]]file|URL|-[REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>
<p>用户可以通过 <code>-c, --change=[]</code> 选项在导入的同时执行容器进行修改的 <code>Dockerfile</code> 指令</p>
<h3 id="docker-load-和-docker-import-的区别"><a href="#docker-load-和-docker-import-的区别" class="headerlink" title="docker load 和 docker import 的区别"></a><code>docker load</code> 和 <code>docker import</code> 的区别</h3><p>两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息，而镜像存储文件将保存完整记录，体积也更大。<br>容器快照文件导入时可以重新指定标签等元数据信息</p>
<h1 id="访问-Docker-仓库"><a href="#访问-Docker-仓库" class="headerlink" title="访问 Docker 仓库"></a>访问 Docker 仓库</h1><p>仓库(Repository)是集中存放镜像的地方，分公有仓库和私有仓库。仓库存放在注册服务器上，一个注册服务器可以有多个仓库，一个仓库下可以有多个镜像</p>
<h2 id="Docker-Hub-公有镜像市场"><a href="#Docker-Hub-公有镜像市场" class="headerlink" title="Docker Hub 公有镜像市场"></a>Docker Hub 公有镜像市场</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>通过命令行执行 <code>docker login</code> 命令来输入用户名、密码和邮箱来完成注册和登录。注册成功后，本地用户目录的 <code>.dockercfg</code> 中将保存用户的认证信息</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>用户无需登录即可通过 <code>docker search</code> 命令来查找官方仓库中的镜像，并利用 <code>docker pull</code> 命令来将它下载到本地</p>
<h3 id="自动创建"><a href="#自动创建" class="headerlink" title="自动创建"></a>自动创建</h3><ul>
<li><input disabled="" type="checkbox"> 待测试</li>
</ul>
<h2 id="时速云镜像市场"><a href="#时速云镜像市场" class="headerlink" title="时速云镜像市场"></a>时速云镜像市场</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>访问 <a href="https://hub.tenxcloud.com/">https://hub.tenxcloud.com</a> , 即可看到已存在的仓库和存储的镜像</p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>下载镜像使用 <code>docker pull</code> 命令，需要在镜像名称前添加注册服务器的具体地址。格式为：<br>index.tenxcloud.com/&lt;namespace&gt;/&lt;repository&gt;:&lt;tag&gt;</p>
<h2 id="搭建本地私有仓库"><a href="#搭建本地私有仓库" class="headerlink" title="搭建本地私有仓库"></a>搭建本地私有仓库</h2><h3 id="使用-registry-镜像创建私有仓库"><a href="#使用-registry-镜像创建私有仓库" class="headerlink" title="使用 registry 镜像创建私有仓库"></a>使用 registry 镜像创建私有仓库</h3><p>安装 <code>Docker</code> 后，可以通过官方提供的 <code>registry</code> 镜像来简单搭建一套本地私有仓库环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 50000:50000 registry</span><br></pre></td></tr></table></figure>

<h3 id="管理私有仓库"><a href="#管理私有仓库" class="headerlink" title="管理私有仓库"></a>管理私有仓库</h3><h4 id="查看系统已经有镜像"><a href="#查看系统已经有镜像" class="headerlink" title="查看系统已经有镜像"></a>查看系统已经有镜像</h4><h4 id="使用-docker-push-上传标记的镜像"><a href="#使用-docker-push-上传标记的镜像" class="headerlink" title="使用 docker push 上传标记的镜像"></a>使用 docker push 上传标记的镜像</h4><h1 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h1><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷本质上是将一个 Linux 中的目录映射到容器中，数据卷存在在物理机(宿主机)之上，不会因为删除容器而丢失数据。</p>
<h3 id="挂载目录作为数据卷-v"><a href="#挂载目录作为数据卷-v" class="headerlink" title="挂载目录作为数据卷 -v"></a>挂载目录作为数据卷 <code>-v</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 /home/sjl/ 下创建 dataVolume 目录</span> </span><br><span class="line">[root@localhost ~]# mkdir /home/sjl/dataVolume</span><br><span class="line"><span class="meta">#</span><span class="bash"> 映射 dataVolume 为容器中的 home 目录</span></span><br><span class="line">[root@localhost ~]# docker run -it --name centos -v /home/sjl/dataVolume:/home centos /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器中的 /home 目录下创建一个文件，在宿主机中即可查看到</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>映射的目录必须是绝对路径，不允许是相对路径，如果目录不存在， Docker 会自动创建</p>
</blockquote>
<h3 id="数据卷权限"><a href="#数据卷权限" class="headerlink" title="数据卷权限"></a>数据卷权限</h3><p>在启动容器时，默认的用户权限是 <code>rw</code>，即可读写。如果仅仅只是为了可读，需要指定为 <code>ro</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it --name centos -v /home/sjl/dataVolume:/home:ro centos /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在数据卷中增加错误提示： touch: cannot touch ‘b.md’: Read-only file system</p>
<blockquote>
<p>-v 参数也支持挂载一个文件到 docker 中，但是不推荐这样做</p>
</blockquote>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>数据卷容器，就是将一个容器做为数据卷，提供其他容器挂载。其方式类似于数据卷的做法，区别在于使用的是一个容器。</p>
<h3 id="命令-–volumes-from"><a href="#命令-–volumes-from" class="headerlink" title="命令 –volumes-from"></a>命令 –volumes-from</h3><h3 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker -it -v /dataVolumes --name data centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时会在容器中的根目录创建一个 dataVolumes 目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker -it --volumes-from data --name c1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时创建一个容器，使用数据卷容器 data 的 dataVolume 映射为本地的目录</span></span><br></pre></td></tr></table></figure>
<p>在容器中操作的所有目录都将会在容器卷 <code>data</code> 中产生，即创建文件，删除文件等都在对应的容器卷中产生。</p>
<h1 id="端口映射与容器互联"><a href="#端口映射与容器互联" class="headerlink" title="端口映射与容器互联"></a>端口映射与容器互联</h1><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>从外部访问到 Docker 容器中的应用时，我们如果不将容器中的端口开放出来，就不能访问到内部应用，想要实现访问内部应用的功能就必须要将端口开放。端口开放的方法就是将容器中的端口映射为宿主机的端口，通过访问宿主机的端口从而访问容器的端口。</p>
<h3 id="端口映射命令"><a href="#端口映射命令" class="headerlink" title="端口映射命令"></a>端口映射命令</h3><p><code>-p(小写)</code> <code>-P(大写)</code>，两个参数的区别在于</p>
<ul>
<li>-p(小写)需要手动指定端口</li>
<li>-P(大写)不需要手动指定端口，自动随机映射宿主机端口</li>
</ul>
<p>-p(小写)支持的格式有：</p>
<ul>
<li>IP:HostPort:ContainerPort : 指定 IP 的指定端口映射</li>
<li>IP::ContainerPort : 指定 IP 的随机端口</li>
<li>HostPort:ContainerPort(常用) : 所有 IP 的随机端口</li>
</ul>
<p>使用 <code>-P(大写)</code> 随机映射 redis 的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it -P --name redis redis</span><br></pre></td></tr></table></figure>

<p>使用 <code>-p(小写)</code> 映射所有宿主机的 IP 的指定端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it -p 16379:6379 --name redis redis</span><br></pre></td></tr></table></figure>
<blockquote>
<p>–name 为容器指定名称，容器名称不能相同，否则不能创建容器。如果容器名称已经存在，要删除之前的容器才能创建。</p>
</blockquote>
<h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><h3 id="容器互联命令"><a href="#容器互联命令" class="headerlink" title="容器互联命令"></a>容器互联命令</h3><ul>
<li>–link 参数，可以让容器之间进行互联<br>容器互联的意义在于，可以直接将容器进行连接，而不通过宿主机，这样就避免了端口暴露在外。常用的就是，在部署应用的容器中，连接数据库的容器，这样就可以直接连接到数据库。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d --name db mysql:5.7</span><br><span class="line">[root@localhost ~]# docker run -d -P --name web --link db:mysql java</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="使用-Dockerfile-创建镜像"><a href="#使用-Dockerfile-创建镜像" class="headerlink" title="使用 Dockerfile 创建镜像"></a>使用 Dockerfile 创建镜像</h1><p>Dockerfile 是一个文本格式的配置文件，用户可以使用 Dockerfile 来快速创建自定义的镜像。</p>
<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>Dockerfile 分为四部分：</p>
<ul>
<li>基础镜像信息</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动时执行指令</li>
</ul>
<h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>指定所创建镜像的基础镜像，如果本地不存在，则默认会去 Docker Hub 下载指定镜像。格式为 FROM &lt;image&gt; 或 FROM&lt;image&gt;:&lt;tag&gt;，或 FROM &lt;image&gt;@&lt;digest&gt;<br>任何 Dockerfile 中的第一条指令必须为 FROM 指令，如果同一个 Dockerfile 中创建多个镜像，可以使用多个 FROM 指令。</p>
<h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>指定维护者信息，格式为 MAINTAINER&lt;name&gt;，该信息会写入生成镜像的 Author 属性域中。</p>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>运行指令命令。格式为 RUN&lt;command&gt; 或 RUN[“executable”, “param1”, “param2”]。<br>每条 RUN 指令在当前镜像的基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行。</p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD 指令用来指定启动容器时默认执行的命令。它支持三种格式：</p>
<ul>
<li>CMD[“executable”, “param1”, “param2”] 使用 exec 执行，是推荐的方式</li>
<li>CMD command param1 param2 在 /bin/bash 中执行，提供给需要交互的应用</li>
<li>CMD[“param1”, “param2”] 提供给 ENTRYPOINT 的默认参数<br>如果用户启动容器时手动指定了运行的命令(作为run的参数)，则会覆盖掉CMD指定的命令。</li>
</ul>
<h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>LABEL 指令用来指定生成镜像的元数据标签信息。格式为 LABEL&lt;key&gt;=&lt;value&gt;…</p>
<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>声明镜像内服务所监听的端口。格式为 EXPOSE&lt;port&gt;[&lt;port&gt;…]<br>该指令只是起到声明作用，并不会自动完成端口映射。</p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>指定环境变量，在镜像生成过程中会被后续RUN指令使用，在镜像启动的容器中也会存在。格式为 ENV&lt;key&gt;&lt;value&gt; 或 ENV&lt;key&gt;=&lt;value&gt;…<br>指令指定的环境变量在运行时可以被覆盖的。 docker run –env&lt;key&gt;=&lt;value&gt; built_image</p>
<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>该命令将复制指定的&lt;src&gt;路径下的内容到容器中的&lt;dest&gt;路径下。格式为：ADD&lt;src&gt;&lt;dest&gt;，其中&lt;src&gt;可以是 Dockerfile 所在目录的一个相对路径(文件或目录)，也可以是一个 URL，还可以是一个 tar 文件。&lt;dest&gt;可以是镜像内的绝对路径，或者相对于工作目录(WORKDIR)的相对路径。路径支持正则表达式</p>
<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>复制本地主机的&lt;src&gt;(为 Dockerfile 所在目录的相对路径、文件或目录)下的内容到镜像中的&lt;dest&gt;下。目标路径不存在时，会自动创建。路径同样支持正则表达式。<br>当使用本地目录为源目录时，推荐使用 COPY</p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>指定镜像的默认入命令，该入口命令会在启动容器时作为根命令执行，所有传入值作为该命令的参数。<br>支持两种格式：</p>
<ul>
<li>ENTRYPOINT [“executable”, “param1”, “param2”](exec 中执行)</li>
<li>ENTRYPOINT command param1 param2 (shell 中执行)<br>每个 Dockerfile 中只能有一个 ENTRYPOINT ， 当指定多个时，只有最后一个有效。在运行时，可以被 –entrypoint 参数覆盖掉，如 docker run –entrypoint</li>
</ul>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>创建一个数据卷挂载点。格式为 VOLUME[“/data”] 可以从本地主机或其他宫挂载数据卷，一般用来存放数据库和需要保存的数据等。</p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>指定运行容器时的用户名或UID，后续的 RUN 等指令也会使用指定的用户身份。<br>格式为 USER daemon</p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>为后续的 RUN、CMD 和 ENTRYPOINT 指令配置工作目录。格式为 WORKDIR/path/to/workdir<br>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br><span class="line"># 最终路径为 /a/b/c</span><br></pre></td></tr></table></figure>

<h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p>指定一些镜像内使用的参数 (例如版本号信息等)，这些参数在执行 docker build 命令时才以 –build-arg&lt;varname&gt;=&lt;value&gt; 格式传入。格式为：ARG&lt;name&gt;[=&lt;default value&gt;]</p>
<h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>配置当所创建的镜像作为其他镜像的基础镜像时，所执行的创建操作指令。格式为 ONBUILD[INSTRUCTION]</p>
<h3 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a>STOPSIGNAL</h3><p>指令所创建镜像启动的容器接收退出的信号值。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br></pre></td></tr></table></figure>

<h3 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h3><p>配置扎启动容器如何进行健康检查(如何判断健康与否)，自 Docker 1.12 开始支持。<br>格式有两种：</p>
<ul>
<li>HEALTHCHECK [OPTIONS] CMD command #根据所执行命令返回值是否为 0 来判断</li>
<li>HEALTHCHECK[OPTIONS] CMD command #根据所执行命令返回值是否为 0 来判断</li>
</ul>
<h3 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h3><p>指定其他命令使用 shell 时默认 shell 类型。<br>默认值为 [“/bin/sh”, “-c”]</p>
<h2 id="创建镜像-1"><a href="#创建镜像-1" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>编写完成 Dockerfile 之后，可以通过 docker build 命令来创建镜像。<br>基本格式为 docker build [选项]内容路径，该命令将读取指定路径下(包括子目录)的 Dockerfile，并将该路径下的所有内容发送给 Docker 服务端，由服务端来创建镜像。</p>
<ul>
<li>如果使用非内容路径下的 Dockerfile，可以通过 -f 选项来指定其路径</li>
<li>要指定生成镜像的标签信息，可以使用 -t 选项</li>
</ul>
<h2 id="使用-dockerignore-文件"><a href="#使用-dockerignore-文件" class="headerlink" title="使用 .dockerignore 文件"></a>使用 .dockerignore 文件</h2><p>可以通过 .dockerignore 文件(每一行添加一条匹配模式)来让 Docker 忽略匹配模式路径下的目录和文件。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># comment</span><br><span class="line">    */temp*</span><br><span class="line">    */*/temp*</span><br><span class="line">    tmp?</span><br><span class="line">    -*</span><br></pre></td></tr></table></figure>

<h2 id="使用-Dockerfile-构建-Docker-镜像"><a href="#使用-Dockerfile-构建-Docker-镜像" class="headerlink" title="使用 Dockerfile 构建 Docker 镜像"></a>使用 Dockerfile 构建 Docker 镜像</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 明日任务,未完成在周末使用 Dockerfile 构建一次镜像</li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>精简镜像用途 : 尽量让每个镜像的用途都比较集中、单一，避免构造大而复杂、多功能的镜像；</li>
<li>选用合适的基础镜像 : 过大的基础镜像会造成生成臃肿的镜像</li>
<li>提供足够清晰的命令注释和维护者个</li>
<li>正确使用版本号</li>
<li>减少镜像层数</li>
<li>及时删除临时文件和缓存文件</li>
<li>提高生成速度</li>
<li>调整合理的指令顺序</li>
<li>减少外部源的干扰</li>
</ul>
<h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><h2 id="使用官方镜像创建容器"><a href="#使用官方镜像创建容器" class="headerlink" title="使用官方镜像创建容器"></a>使用官方镜像创建容器</h2><h3 id="busybox-的安装"><a href="#busybox-的安装" class="headerlink" title="busybox 的安装"></a>busybox 的安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker pull busybox</span><br><span class="line">[root@localhost ~]# docker run -it --name busybox busybox:latest</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-的安装"><a href="#Ubuntu-的安装" class="headerlink" title="Ubuntu 的安装"></a>Ubuntu 的安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-的安装"><a href="#CentOS-的安装" class="headerlink" title="CentOS 的安装"></a>CentOS 的安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-的安装"><a href="#Nginx-的安装" class="headerlink" title="Nginx 的安装"></a>Nginx 的安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d --name nginx -p 80:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure>
<p>在启动 <code>nginx</code> 的时候，可以添加 -v 选项指定目录 </p>
<h3 id="Jenkins-的安"><a href="#Jenkins-的安" class="headerlink" title="Jenkins 的安"></a>Jenkins 的安</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 8080:8080 -p 50000:50000 --name myjenkins jenkins</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用断卷容器映射出 Jenkins 的操作目录 </p>
</blockquote>
<h1 id="数据库相关容器的创建"><a href="#数据库相关容器的创建" class="headerlink" title="数据库相关容器的创建"></a>数据库相关容器的创建</h1><ol>
<li>MySQL<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123 mysql</span><br></pre></td></tr></table></figure>
docker 容器互联，应用容器连接至数据库容器  </li>
</ol>
<ul>
<li>日志</li>
<li>配置文件<ul>
<li>自定义配置文件 </li>
<li>使用命令传入</li>
</ul>
</li>
</ul>
<ol start="2">
<li>MongoDB<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d --name mongodb -p 27017：2 mongo</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct实用</title>
    <url>/2021/08/02/MapStruct%E5%AE%9E%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h1><p>在 <code>pom.xml</code> 中加入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果使用了 <code>lombok</code> 还需要再添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                  	<span class="comment">&lt;!-- lombok 需要添加以下内容 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- lombok 版本大于等于 1.18.16 还需要添加以下内容 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MapStruct 是用来做两个对象之间的映射关系，在平常的开发中，我们经常会使用到 <code>BeanUtils</code> 这种工具。<code>BeanUtils</code> 的问题在于，他对每个成员亦是赋值是通过反射来做的，并且成员变量的字段名必须一致。而 <code>MapStruct</code> 是在编译期完成这件事情的，还可以将不同名称，不同类型的成员变量进行赋值。</p>
<h1 id="定义-Mapper"><a href="#定义-Mapper" class="headerlink" title="定义 Mapper"></a>定义 Mapper</h1><p>在接口上打上 <code>@Mapper</code> 注解, <code>MapStruct</code> 会生成对应的接口实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Convert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用-Convert"><a href="#使用-Convert" class="headerlink" title="使用 Convert"></a>使用 Convert</h1><h2 id="普通方式-推荐"><a href="#普通方式-推荐" class="headerlink" title="普通方式(推荐)"></a>普通方式(推荐)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Convert</span> </span>&#123;</span><br><span class="line">	Convert INSTANCE = Mappers.getMapper(Convert.class);</span><br><span class="line">  	<span class="meta">@Mapping(source = &quot;createTime&quot;, target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用映射使用时，Convert.INSTANCE.personDTO2Person(personDTO) 即可。 </p>
<h2 id="Spring方式"><a href="#Spring方式" class="headerlink" title="Spring方式"></a>Spring方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(componentModel = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mapping(source = &quot;createTime&quot;, target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>会检查 classpath 下是否饮食 spring 相关依赖</li>
</ul>
<p>使用时， 用 Spring 的注解 <code>@Autowired</code> 注入。</p>
<h1 id="Mapping-注解"><a href="#Mapping-注解" class="headerlink" title="@Mapping 注解"></a>@Mapping 注解</h1><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><ul>
<li>指定源名称，即要映射的对象的名称</li>
<li>不能与constant 或 expression</li>
</ul>
<h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><ul>
<li>指定目标名称，即被映射的对象名称</li>
</ul>
<h2 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h2><ul>
<li>将目标对象赋值为指定的常量</li>
<li>不能与source ， defaultValue ， defaultExpression 或 expression 同时存在</li>
</ul>
<h2 id="dateFormat"><a href="#dateFormat" class="headerlink" title="dateFormat"></a>dateFormat</h2><ul>
<li>将从 <code>String</code> 映射到 <code>Date</code> ， <code>SimpleDateFormat</code> 进行处理。</li>
</ul>
<h2 id="numberFormat"><a href="#numberFormat" class="headerlink" title="numberFormat"></a>numberFormat</h2><ul>
<li>将从 <code>Number</code> 映射到 <code>String</code> , <code>DecimalFormat</code> 进行处理。其他类型将被忽略</li>
</ul>
<h2 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h2><ul>
<li><p>使用 java 表达式进行映射。 格式为: java(<EXPRESSION>)。例: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapping(target = &quot;name&quot;, expresession = &quot;java(new Date().getTime())&quot;)</span></span><br><span class="line"><span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>不能与 与source， defaultValue ， defaultExpression 和 constant 同时使用</p>
</li>
</ul>
<h2 id="defaultExpression"><a href="#defaultExpression" class="headerlink" title="defaultExpression"></a>defaultExpression</h2><ul>
<li><p>作用与 <code>expression</code> 类似，在 <code>source</code> 为 <code>null</code> 的时候应用。</p>
</li>
<li><p>不能与 expression ， defaultValue 或 constant </p>
</li>
</ul>
<h2 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h2><ul>
<li>指定字段忽略 </li>
</ul>
<h2 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h2><ul>
<li>当 <code>source</code> 为 <code>null</code> 的时候，为 <code>target</code> 字段指定默认值。</li>
</ul>
<h2 id="qualifiedBy"><a href="#qualifiedBy" class="headerlink" title="qualifiedBy"></a>qualifiedBy</h2><h2 id="qualifiedByName"><a href="#qualifiedByName" class="headerlink" title="qualifiedByName"></a>qualifiedByName</h2><h2 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h2><h2 id="dependsOn"><a href="#dependsOn" class="headerlink" title="dependsOn"></a>dependsOn</h2><h2 id="nullValueCheckStrategy"><a href="#nullValueCheckStrategy" class="headerlink" title="nullValueCheckStrategy"></a>nullValueCheckStrategy</h2><h2 id="nullValuePropertyMappingStrategy"><a href="#nullValuePropertyMappingStrategy" class="headerlink" title="nullValuePropertyMappingStrategy"></a>nullValuePropertyMappingStrategy</h2><h1 id="映射技巧"><a href="#映射技巧" class="headerlink" title="映射技巧"></a>映射技巧</h1><h2 id="相同类型相同名称的映射"><a href="#相同类型相同名称的映射" class="headerlink" title="相同类型相同名称的映射"></a>相同类型相同名称的映射</h2><ul>
<li>直接写对应的映射方法即可，在参数和返回值分别写对象的 Bean 对象即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">		PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相同类型不同名称的映射"><a href="#相同类型不同名称的映射" class="headerlink" title="相同类型不同名称的映射"></a>相同类型不同名称的映射</h2><ul>
<li>使用 <code>@Mapping</code> 注解标注对应的 <code>source</code> 和 <code>target</code> ，<code>source</code> 源对象的名称, <code>target</code> 目标名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="meta">@Mapping(source = &quot;createTime&quot;, target = &quot;time&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不同类型相同名称的映射"><a href="#不同类型相同名称的映射" class="headerlink" title="不同类型相同名称的映射"></a>不同类型相同名称的映射</h2><h3 id="int-到-String"><a href="#int-到-String" class="headerlink" title="int 到 String"></a>int 到 String</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PersonDTO 映射到 Person，age 字段在 Person 中是 String，PersonDTO 中是 Integer，直接映射即可，不用加额外的东西</span></span><br><span class="line"><span class="comment">// 生成的代码如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName( personDTO.getName() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getAge() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">          	<span class="comment">// 这里会自动加上转换的代码。</span></span><br><span class="line">            person.setAge( String.valueOf( personDTO.getAge() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setCreateTime( personDTO.getCreateTime() );</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反过来映射， personDTO 中是 String, Person 中是 Integer,生成的代码如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName( personDTO.getName() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getAge() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="comment">// 这里会自动加上转换的代码。</span></span><br><span class="line">            person.setAge( Integer.parseInt( personDTO.getAge() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setCreateTime( personDTO.getCreateTime() );</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="enum-到-String"><a href="#enum-到-String" class="headerlink" title="enum 到 String"></a>enum 到 String</h3><ul>
<li>调用对应枚举的 <code>name()</code> 方法，然后再 set 到对应字段。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换 Convert</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName( personDTO.getName() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getAge() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setAge( Integer.parseInt( personDTO.getAge() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setCreateTime( personDTO.getCreateTime() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getSex() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setSex( personDTO.getSex().name() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>思考:如果是枚举中的某个字段，例如: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> </span>&#123;</span><br><span class="line">    MAN(<span class="number">1</span>),</span><br><span class="line">    WOMAN(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    SexEnum(<span class="keyword">int</span> sex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的数字要映射到对应的对象如何转换？ <code>Person</code> 定义如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="comment">// 1-男，0-女</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反过来呢？ 0/1 映射成对应的枚举。</p>
</li>
</ul>
<h3 id="BigDecimal-到-String"><a href="#BigDecimal-到-String" class="headerlink" title="BigDecimal 到 String"></a>BigDecimal 到 String</h3><ul>
<li>将数字进行格式化处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal power;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射 Convert</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="meta">@Mapping(target = &quot;power&quot;, source = &quot;power&quot;, numberFormat = &quot;#.##E0&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码，使用 DecimalFormat 进行格式化处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getPower() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setPower( createDecimalFormat( <span class="string">&quot;#.##E0&quot;</span> ).format( personDTO.getPower() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setName( personDTO.getName() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getAge() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setAge( Integer.parseInt( personDTO.getAge() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setCreateTime( personDTO.getCreateTime() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getSex() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setSex( personDTO.getSex().name() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DecimalFormat <span class="title">createDecimalFormat</span><span class="params">( String numberFormat )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat( numberFormat );</span><br><span class="line">        df.setParseBigDecimal( <span class="keyword">true</span> );</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Date-到-String"><a href="#Date-到-String" class="headerlink" title="Date 到 String"></a>Date 到 String</h2><ul>
<li>支持 Date 、Calendar、LocalDate、Instant、ZonedDateTime、LocalDateTime 等多种类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> LocalDate createTime;</span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射的 Convert，</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(target = &quot;createTime&quot;, source = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码， 使用 DateTimeFormatter 进行格式，如果是 Date 会使用 SimpleDateFormt 进行格式化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getCreateTime() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setCreateTime( DateTimeFormatter.ofPattern( <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ).format( personDTO.getCreateTime() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        person.setName( personDTO.getName() );</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getAge() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setAge( Integer.parseInt( personDTO.getAge() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO.getSex() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setSex( personDTO.getSex().name() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不同类型不同名称的映射"><a href="#不同类型不同名称的映射" class="headerlink" title="不同类型不同名称的映射"></a>不同类型不同名称的映射</h2><ul>
<li>需要在 <code>@Mapping</code> 注解的 <code>target</code> 中指定目标名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;createTime&quot;, target = &quot;time&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个同名参数的成员变量"><a href="#多个同名参数的成员变量" class="headerlink" title="多个同名参数的成员变量"></a>多个同名参数的成员变量</h2><ul>
<li><p>在转换的方法中有多个参数，参数为 DTO 对象，多个对象可能会出现重名的情况。例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射后的对象， userDTO.name -&gt; nickname; personDTO.name -&gt; name;</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>映射时需要指定映射的名称</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;userDTO.name&quot;, target = &quot;nickName&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;personDTO.name&quot;, target = &quot;name&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO, UserDTO userDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO, UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> &amp;&amp; userDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">if</span> ( personDTO != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setName( personDTO.getName() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( userDTO != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setNickName( userDTO.getName() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在参数上映射而不返回值"><a href="#在参数上映射而不返回值" class="headerlink" title="在参数上映射而不返回值"></a>在参数上映射而不返回值</h2><ul>
<li>上面的映射全都是把参数映射成对应的返回值，我们接收到的返回值是映射后的对象。这里的问题是，返回对象是新 <code>new</code> 的，如果我们已经存在一个对象，映射部分字段想要传入一个已经手动 <code>new</code> 好的对象来映射。</li>
<li>使用 <code>@MappingTarget</code> 来标记返回的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;userDTO.name&quot;, target = &quot;nickName&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;personDTO.name&quot;, target = &quot;name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO, UserDTO userDTO, <span class="meta">@MappingTarget</span> Person person)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO, UserDTO userDTO, Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> &amp;&amp; userDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setName( personDTO.getName() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( userDTO != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            person.setNickName( userDTO.getName() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="成员变量直接映射"><a href="#成员变量直接映射" class="headerlink" title="成员变量直接映射"></a>成员变量直接映射</h2><ul>
<li>即没有 get 和 set 方法，而是直接使用 public 定义的成员变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="function">Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.name = personDTO.name;</span><br><span class="line">        person.age = personDTO.age;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="嵌套的-Bean-映射"><a href="#嵌套的-Bean-映射" class="headerlink" title="嵌套的 Bean 映射"></a>嵌套的 Bean 映射</h2><ul>
<li>对象中有多层嵌套</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Record record;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String recordName;</span><br><span class="line">        <span class="keyword">private</span> Integer number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String personName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer account;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 PersonDTO 中的 name 映射为 personName</span></span><br><span class="line"><span class="comment">// age 映射为 age</span></span><br><span class="line"><span class="comment">// Record 中的 number 映射为 Person 中的 account</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;record.number&quot;, target = &quot;account&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;name&quot;, target = &quot;personName&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAccount( personDTORecordNumber( personDTO ) );</span><br><span class="line">        person.setPersonName( personDTO.getName() );</span><br><span class="line">        person.setAge( personDTO.getAge() );</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Integer <span class="title">personDTORecordNumber</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Record record = personDTO.getRecord();</span><br><span class="line">        <span class="keyword">if</span> ( record == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Integer number = record.getNumber();</span><br><span class="line">        <span class="keyword">if</span> ( number == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Builder-模式映射"><a href="#Builder-模式映射" class="headerlink" title="Builder 模式映射"></a>Builder 模式映射</h2><ul>
<li>被映射代码是基于 Builder 模式设计的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射器</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="function">Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成的映射器代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConvertImpl</span> <span class="keyword">implements</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">personDTOUSer2Person</span><span class="params">(PersonDTO personDTO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( personDTO == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PersonBuilder person = Person.builder();</span><br><span class="line">        person.name( personDTO.getName() );</span><br><span class="line">        person.age( personDTO.getAge() );</span><br><span class="line">        <span class="keyword">return</span> person.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="构造器映射"><a href="#构造器映射" class="headerlink" title="构造器映射"></a>构造器映射</h2><ul>
<li>只有一个公共的构造器</li>
<li>有一个 <code>@Default</code> 注解，可以来自任何包。</li>
<li>有一个无参构造器，同时还包含其他构造器。</li>
<li>有多个公共构造器，不含无参构造器，（编译错误）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="只有一个公共的构造器"><a href="#只有一个公共的构造器" class="headerlink" title="只有一个公共的构造器"></a>只有一个公共的构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="集合映射"><a href="#集合映射" class="headerlink" title="集合映射"></a>集合映射</h1><h1 id="Map映射"><a href="#Map映射" class="headerlink" title="Map映射"></a>Map映射</h1><h1 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h1><h2 id="向映射器添加自定义方法"><a href="#向映射器添加自定义方法" class="headerlink" title="向映射器添加自定义方法"></a>向映射器添加自定义方法</h2><ul>
<li>在接口中写一个 <code>default</code> 方法即可，这其实就是自己手动写个方法。**(很少会用)**</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonConvert</span> </span>&#123;</span><br><span class="line">    PersonConvert INSTANCE = Mappers.getMapper(PersonConvert.class);</span><br><span class="line">    <span class="meta">@Mapping(source = &quot;createTime&quot;, target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="function">Person <span class="title">personDTO2Person</span><span class="params">(PersonDTO personDTO)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> PersonDTO <span class="title">person2PersonDTO</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        PersonDTO dto = <span class="keyword">new</span> PersonDTO();</span><br><span class="line">        dto.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        dto.setAge(person.getAge() + <span class="number">13</span>);</span><br><span class="line">        dto.setCreateTime(<span class="string">&quot;这个时间很奇怪，我必须手动实现&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在抽象类中实现。也是一样写一个 <code>public</code> 的方法即可，<code>Mapstruct</code> 的实现是，继承我们自己写的那个抽象类。(基本不用)</li>
</ul>
]]></content>
      <categories>
        <category>MapStruct</category>
      </categories>
      <tags>
        <tag>MapStruct</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念耗子哥</title>
    <url>/2023/05/16/%E7%BA%AA%E5%BF%B5%E8%80%97%E5%AD%90%E5%93%A5/</url>
    <content><![CDATA[<blockquote>
<p>芝兰生于深谷，不以无人而不芳<br>君子修身养德，不以穷困而改志</p>
</blockquote>
<p>这是耗子哥(陈皓)的座右铭。</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/11%E5%B9%B4%E7%9A%84%E8%80%97%E5%AD%90%E5%93%A5.jpg" alt="img"></p>
<h1 id="为什么叫耗子哥"><a href="#为什么叫耗子哥" class="headerlink" title="为什么叫耗子哥"></a>为什么叫耗子哥</h1><p>之前他微博发过一个调侃，他的粉丝中有叫他 『耗子哥』和『耗子叔』的。叫『耗子哥』的要比叫『耗子叔』的辈份高一辈 😄。从那以后，我就坚定的叫耗子哥。</p>
<h1 id="我与耗子哥"><a href="#我与耗子哥" class="headerlink" title="我与耗子哥"></a>我与耗子哥</h1><p>在我刚入行的时候，基本上没人带。就成天刷一些行业大牛的的博客，文章啥的。有一次无意之中刷到了一个叫 <a href="coolshell.cn">coolshell.cn</a> 的网站，那是在 16 年。那个时候里面的博客基本看不懂，有一篇稍微能看懂一点，那就是消除 <code>if</code> 重构代码相关的 <a href="https://coolshell.cn/articles/17757.html">如何重构“箭头型”代码</a>。</p>
<p>我最开始看耗子哥的博客的时候，是看他的简介。简介里面有一个点，瞬间击中我了，觉得这个人很有意思他居然不愿意出书。</p>
<blockquote>
<p>另外，我在至少45岁前不会出书，因为我觉得在那之前，我是不会沉淀足够的学识，没有资格出书。所以，<strong>请各种出版社的编辑们不要再来找我商谈出书的事</strong>。与其花精力来找我谈出书，不如想想怎么少出那么多的烂书。</p>
</blockquote>
<p>然后我就慢慢的关注上了这个技术博主，时不时的刷下他的博客看看有没有更新博客，后来又关注了他的微博。</p>
<p>时间来到 2017 年，他在极客时间开专栏了。我记得当时是 199 的专栏。我没有在第一时间买，在 18 年 4 月份左右买的，从此以后沉迷其中而不能自拔。此时我的工作也出现了变动，当时的工作也暴雷了。</p>
<h1 id="重塑我的技术观"><a href="#重塑我的技术观" class="headerlink" title="重塑我的技术观"></a>重塑我的技术观</h1><p>通过极客时间的专栏，对耗子哥有了更多的关注。每周两篇的年更专栏，偶尔在极客时间也会直播。这让我通过网络见到了这个心中的偶像，技术很牛、头发发白、胖胖的大叔，他很喜欢微笑。</p>
<p>他在专栏、直播、博客、微博等多个渠道聊的最多的，在我看来是技术人员的成长。</p>
<blockquote>
<p>直击技术本质、学习基础技术、做酷的事情、不要自己墙了自己、到源头去学习技术</p>
</blockquote>
<p>上面这些，都是他经常提到的东西。尤其是到源头学习技术，他甚至说不要看网上任何的中文资料，包括他的专栏(黑起来连自己也黑)。</p>
<p>改变一技术人，很多时候只需要一句直击心灵的话。就是那句 <code>到源头去学习技术</code> ，对我的影响很大。</p>
<p>我知道，耗子哥的本意是，应该学习英文的资料。不要学别人的二手信息。</p>
<p>现在的我，因为英文很差，也很难做到完全学习英文资料。但是我也会去源头学习:</p>
<ul>
<li>对于一个问题的探索，跟到直至最底层的那段代码。</li>
<li>对于一个接口，找到完整的请求响应。</li>
</ul>
<p>这些，对我的影响是，我不满足于表面的信息。我学习了网络的知识: <code>TCP/IP</code> 协议，<code>HTTP</code> 抓包等等。今天，我排查一些客户端请求的时候，会用一些抓包工具来抓这些响应请求，看一个完整的链接路。</p>
<p>我在学习新技术的时候，也不再像以前那样，记下每个 <code>API</code> 怎么调用，要传什么参数……</p>
<p>很多的影响，不是立即就发生的，但那已经融进我的血液中。</p>
<p>我还在学习的路上，耗子哥你的那些指导意见我还想再听，我想你，耗子哥。</p>
<h1 id="引路人"><a href="#引路人" class="headerlink" title="引路人"></a>引路人</h1><p>一个人的成长，一个行业的发展，总有一些引路人。</p>
<p>陈皓先生，堪当行业引路人。而他，也是我心中的那个引路人，实实在在的影响着我。</p>
<p><img src="https://sjl-picture.oss-cn-shanghai.aliyuncs.com/img/%E8%80%97%E5%AD%90%E5%93%A5.png" alt="耗子哥"></p>
<p>谨以此文纪念陈皓先生。</p>
<p>2023-05-16</p>
]]></content>
      <categories>
        <category>耗子哥</category>
      </categories>
      <tags>
        <tag>耗子哥</tag>
      </tags>
  </entry>
</search>
